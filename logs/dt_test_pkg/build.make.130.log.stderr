In file included from [01m[K/home/roku/workspace_jun/dt_test/src/dt_test_pkg/src/digital_twin.cpp:3[m[K:
[01m[K/home/roku/workspace_jun/dt_test/src/dt_test_pkg/src/dynamic_model_quad.cpp:51:5:[m[K [01;31m[Kerror: [m[Kâ€˜[01m[Kr[m[Kâ€™ does not name a type
     [01;31m[Kr[m[K[0] = Vector3f(0.0f, 0.0f, 0.0f);// _TODO_
     [01;31m[K^[m[K
[01m[K/home/roku/workspace_jun/dt_test/src/dt_test_pkg/src/dynamic_model_quad.cpp:52:5:[m[K [01;31m[Kerror: [m[Kâ€˜[01m[Kr[m[Kâ€™ does not name a type
     [01;31m[Kr[m[K[1] = Vector3f(0.0f, 0.0f, 0.0f);
     [01;31m[K^[m[K
[01m[K/home/roku/workspace_jun/dt_test/src/dt_test_pkg/src/dynamic_model_quad.cpp:53:5:[m[K [01;31m[Kerror: [m[Kâ€˜[01m[Kr[m[Kâ€™ does not name a type
     [01;31m[Kr[m[K[2] = Vector3f(0.0f, 0.0f, 0.0f);
     [01;31m[K^[m[K
[01m[K/home/roku/workspace_jun/dt_test/src/dt_test_pkg/src/dynamic_model_quad.cpp:54:5:[m[K [01;31m[Kerror: [m[Kâ€˜[01m[Kr[m[Kâ€™ does not name a type
     [01;31m[Kr[m[K[3] = Vector3f(0.0f, 0.0f, 0.0f);
     [01;31m[K^[m[K
[01m[K/home/roku/workspace_jun/dt_test/src/dt_test_pkg/src/dynamic_model_quad.cpp:61:29:[m[K [01;31m[Kerror: [m[Kredeclaration of â€˜[01m[Kfloat QuadDynamicModel::_q[m[Kâ€™
     float _p =0.0f, _q =0.0f[01;31m[K,[m[K _r = 0.0f;
                             [01;31m[K^[m[K
[01m[K/home/roku/workspace_jun/dt_test/src/dt_test_pkg/src/dynamic_model_quad.cpp:60:49:[m[K [01;36m[Knote: [m[Kprevious declaration â€˜[01m[KEigen::Vector3f QuadDynamicModel::_q[m[Kâ€™
  Vector3f _q = Quaternion(1.0f, 0.0f, 0.0f, 0.0f[01;36m[K)[m[K;  // quaternion
                                                 [01;36m[K^[m[K
[01m[K/home/roku/workspace_jun/dt_test/src/dt_test_pkg/src/dynamic_model_quad.cpp:64:35:[m[K [01;31m[Kerror: [m[Kredeclaration of â€˜[01m[Kfloat QuadDynamicModel::_u [1][m[Kâ€™
     float _u[0] =0.0f, _u[1] =0.0f[01;31m[K,[m[K _u[2] =0.0f, _u[3] = 0.0f; // motor ouput
                                   [01;31m[K^[m[K
[01m[K/home/roku/workspace_jun/dt_test/src/dt_test_pkg/src/dynamic_model_quad.cpp:64:18:[m[K [01;36m[Knote: [m[Kprevious declaration â€˜[01m[Kfloat QuadDynamicModel::_u [0][m[Kâ€™
     float _u[0] =[01;36m[K0.0f[m[K, _u[1] =0.0f, _u[2] =0.0f, _u[3] = 0.0f; // motor ouput
                  [01;36m[K^~~~[m[K
[01m[K/home/roku/workspace_jun/dt_test/src/dt_test_pkg/src/dynamic_model_quad.cpp:64:48:[m[K [01;31m[Kerror: [m[Kredeclaration of â€˜[01m[Kfloat QuadDynamicModel::_u [2][m[Kâ€™
     float _u[0] =0.0f, _u[1] =0.0f, _u[2] =0.0f[01;31m[K,[m[K _u[3] = 0.0f; // motor ouput
                                                [01;31m[K^[m[K
[01m[K/home/roku/workspace_jun/dt_test/src/dt_test_pkg/src/dynamic_model_quad.cpp:64:18:[m[K [01;36m[Knote: [m[Kprevious declaration â€˜[01m[Kfloat QuadDynamicModel::_u [0][m[Kâ€™
     float _u[0] =[01;36m[K0.0f[m[K, _u[1] =0.0f, _u[2] =0.0f, _u[3] = 0.0f; // motor ouput
                  [01;36m[K^~~~[m[K
[01m[K/home/roku/workspace_jun/dt_test/src/dt_test_pkg/src/dynamic_model_quad.cpp:64:58:[m[K [01;31m[Kerror: [m[Kredeclaration of â€˜[01m[Kfloat QuadDynamicModel::_u [3][m[Kâ€™
     float _u[0] =0.0f, _u[1] =0.0f, _u[2] =0.0f, _u[3] = [01;31m[K0.0f[m[K; // motor ouput
                                                          [01;31m[K^~~~[m[K
[01m[K/home/roku/workspace_jun/dt_test/src/dt_test_pkg/src/dynamic_model_quad.cpp:64:18:[m[K [01;36m[Knote: [m[Kprevious declaration â€˜[01m[Kfloat QuadDynamicModel::_u [0][m[Kâ€™
     float _u[0] =[01;36m[K0.0f[m[K, _u[1] =0.0f, _u[2] =0.0f, _u[3] = 0.0f; // motor ouput
                  [01;36m[K^~~~[m[K
[01m[K/home/roku/workspace_jun/dt_test/src/dt_test_pkg/src/dynamic_model_quad.cpp:65:40:[m[K [01;31m[Kerror: [m[Kredeclaration of â€˜[01m[Kfloat QuadDynamicModel::_omega [1][m[Kâ€™
  float _omega[0] =0.0f, _omega[1] =0.0f[01;31m[K,[m[K _omega[2] =0.0f, _omega[3] = 0.0f; // angular velocity of motor
                                        [01;31m[K^[m[K
[01m[K/home/roku/workspace_jun/dt_test/src/dt_test_pkg/src/dynamic_model_quad.cpp:65:19:[m[K [01;36m[Knote: [m[Kprevious declaration â€˜[01m[Kfloat QuadDynamicModel::_omega [0][m[Kâ€™
  float _omega[0] =[01;36m[K0.0f[m[K, _omega[1] =0.0f, _omega[2] =0.0f, _omega[3] = 0.0f; // angular velocity of motor
                   [01;36m[K^~~~[m[K
[01m[K/home/roku/workspace_jun/dt_test/src/dt_test_pkg/src/dynamic_model_quad.cpp:65:57:[m[K [01;31m[Kerror: [m[Kredeclaration of â€˜[01m[Kfloat QuadDynamicModel::_omega [2][m[Kâ€™
  float _omega[0] =0.0f, _omega[1] =0.0f, _omega[2] =0.0f[01;31m[K,[m[K _omega[3] = 0.0f; // angular velocity of motor
                                                         [01;31m[K^[m[K
[01m[K/home/roku/workspace_jun/dt_test/src/dt_test_pkg/src/dynamic_model_quad.cpp:65:19:[m[K [01;36m[Knote: [m[Kprevious declaration â€˜[01m[Kfloat QuadDynamicModel::_omega [0][m[Kâ€™
  float _omega[0] =[01;36m[K0.0f[m[K, _omega[1] =0.0f, _omega[2] =0.0f, _omega[3] = 0.0f; // angular velocity of motor
                   [01;36m[K^~~~[m[K
[01m[K/home/roku/workspace_jun/dt_test/src/dt_test_pkg/src/dynamic_model_quad.cpp:65:71:[m[K [01;31m[Kerror: [m[Kredeclaration of â€˜[01m[Kfloat QuadDynamicModel::_omega [3][m[Kâ€™
  float _omega[0] =0.0f, _omega[1] =0.0f, _omega[2] =0.0f, _omega[3] = [01;31m[K0.0f[m[K; // angular velocity of motor
                                                                       [01;31m[K^~~~[m[K
[01m[K/home/roku/workspace_jun/dt_test/src/dt_test_pkg/src/dynamic_model_quad.cpp:65:19:[m[K [01;36m[Knote: [m[Kprevious declaration â€˜[01m[Kfloat QuadDynamicModel::_omega [0][m[Kâ€™
  float _omega[0] =[01;36m[K0.0f[m[K, _omega[1] =0.0f, _omega[2] =0.0f, _omega[3] = 0.0f; // angular velocity of motor
                   [01;36m[K^~~~[m[K
[01m[K/home/roku/workspace_jun/dt_test/src/dt_test_pkg/src/dynamic_model_quad.cpp:68:5:[m[K [01;31m[Kerror: [m[Kâ€˜[01m[K_d[m[Kâ€™ does not name a type
     [01;31m[K_d[m[K[0] = Vector3f(0.0f, 0.0f, 1.0f);
     [01;31m[K^~[m[K
[01m[K/home/roku/workspace_jun/dt_test/src/dt_test_pkg/src/dynamic_model_quad.cpp:69:5:[m[K [01;31m[Kerror: [m[Kâ€˜[01m[K_d[m[Kâ€™ does not name a type
     [01;31m[K_d[m[K[1] = _d[0];
     [01;31m[K^~[m[K
[01m[K/home/roku/workspace_jun/dt_test/src/dt_test_pkg/src/dynamic_model_quad.cpp:70:5:[m[K [01;31m[Kerror: [m[Kâ€˜[01m[K_d[m[Kâ€™ does not name a type
     [01;31m[K_d[m[K[2] = _d[0];
     [01;31m[K^~[m[K
[01m[K/home/roku/workspace_jun/dt_test/src/dt_test_pkg/src/dynamic_model_quad.cpp:71:5:[m[K [01;31m[Kerror: [m[Kâ€˜[01m[K_d[m[Kâ€™ does not name a type
     [01;31m[K_d[m[K[3] = _d[0];
     [01;31m[K^~[m[K
[01m[K/home/roku/workspace_jun/dt_test/src/dt_test_pkg/src/dynamic_model_quad.cpp:45:5:[m[K [01;31m[Kerror: [m[Kcould not convert â€˜[01m[K{{1.0e+0f, 1.0e+0f, 1.0e+0f}, {1.0e+0f, 1.0e+0f, 1.0e+0f}, {1.0e+0f, 1.0e+0f, 1.0e+0f}}[m[Kâ€™ from â€˜[01m[K<brace-enclosed initializer list>[m[Kâ€™ to â€˜[01m[KEigen::Matrix3f[m[Kâ€™ {aka â€˜[01m[KEigen::Matrix<float, 3, 3>[m[Kâ€™}
     [01;31m[K}[m[K;// inertia matrix
     [01;31m[K^[m[K
[01m[K/home/roku/workspace_jun/dt_test/src/dt_test_pkg/src/dynamic_model_quad.cpp:60:26:[m[K [01;31m[Kerror: [m[Kmissing template arguments before â€˜[01m[K([m[Kâ€™ token
  Vector3f _q = Quaternion[01;31m[K([m[K1.0f, 0.0f, 0.0f, 0.0f);  // quaternion
                          [01;31m[K^[m[K
[01m[K/home/roku/workspace_jun/dt_test/src/dt_test_pkg/src/dynamic_model_quad.cpp:62:39:[m[K [01;31m[Kerror: [m[Kno matching function for call to â€˜[01m[KEigen::Matrix<float, 3, 1>::Matrix(float&, Eigen::Vector3f&, float&)[m[Kâ€™
  Vector3f _Omega = Vector3f(_p, _q, _r[01;31m[K)[m[K; // angular velocity in inertial frame
                                       [01;31m[K^[m[K
In file included from [01m[K/usr/include/eigen3/Eigen/Core:458[m[K,
                 from [01m[K/usr/include/eigen3/Eigen/Dense:1[m[K,
                 from [01m[K/usr/include/eigen3/Eigen/Eigen:1[m[K,
                 from [01m[K/home/roku/workspace_jun/dt_test/src/dt_test_pkg/src/dynamic_model_quad.cpp:1[m[K,
                 from [01m[K/home/roku/workspace_jun/dt_test/src/dt_test_pkg/src/digital_twin.cpp:3[m[K:
[01m[K/usr/include/eigen3/Eigen/src/Core/Matrix.h:387:14:[m[K [01;36m[Knote: [m[Kcandidate: â€˜[01m[Ktemplate<class OtherDerived> Eigen::Matrix<_Scalar, _Rows, _Cols, _Options, _MaxRows, _MaxCols>::Matrix(const Eigen::RotationBase<OtherDerived, ColsAtCompileTime>&)[m[Kâ€™
     explicit [01;36m[KMatrix[m[K(const RotationBase<OtherDerived,ColsAtCompileTime>& r);
              [01;36m[K^~~~~~[m[K
[01m[K/usr/include/eigen3/Eigen/src/Core/Matrix.h:387:14:[m[K [01;36m[Knote: [m[K  template argument deduction/substitution failed:
In file included from [01m[K/home/roku/workspace_jun/dt_test/src/dt_test_pkg/src/digital_twin.cpp:3[m[K:
[01m[K/home/roku/workspace_jun/dt_test/src/dt_test_pkg/src/dynamic_model_quad.cpp:62:39:[m[K [01;36m[Knote: [m[K  mismatched types â€˜[01m[Kconst Eigen::RotationBase<OtherDerived, 1>[m[Kâ€™ and â€˜[01m[Kfloat[m[Kâ€™
  Vector3f _Omega = Vector3f(_p, _q, _r[01;36m[K)[m[K; // angular velocity in inertial frame
                                       [01;36m[K^[m[K
In file included from [01m[K/usr/include/eigen3/Eigen/Core:458[m[K,
                 from [01m[K/usr/include/eigen3/Eigen/Dense:1[m[K,
                 from [01m[K/usr/include/eigen3/Eigen/Eigen:1[m[K,
                 from [01m[K/home/roku/workspace_jun/dt_test/src/dt_test_pkg/src/dynamic_model_quad.cpp:1[m[K,
                 from [01m[K/home/roku/workspace_jun/dt_test/src/dt_test_pkg/src/digital_twin.cpp:3[m[K:
[01m[K/usr/include/eigen3/Eigen/src/Core/Matrix.h:376:25:[m[K [01;36m[Knote: [m[Kcandidate: â€˜[01m[Ktemplate<class OtherDerived> Eigen::Matrix<_Scalar, _Rows, _Cols, _Options, _MaxRows, _MaxCols>::Matrix(const Eigen::EigenBase<OtherDerived>&)[m[Kâ€™
     EIGEN_STRONG_INLINE [01;36m[KMatrix[m[K(const EigenBase<OtherDerived> &other)
                         [01;36m[K^~~~~~[m[K
[01m[K/usr/include/eigen3/Eigen/src/Core/Matrix.h:376:25:[m[K [01;36m[Knote: [m[K  template argument deduction/substitution failed:
In file included from [01m[K/home/roku/workspace_jun/dt_test/src/dt_test_pkg/src/digital_twin.cpp:3[m[K:
[01m[K/home/roku/workspace_jun/dt_test/src/dt_test_pkg/src/dynamic_model_quad.cpp:62:39:[m[K [01;36m[Knote: [m[K  mismatched types â€˜[01m[Kconst Eigen::EigenBase<Derived>[m[Kâ€™ and â€˜[01m[Kfloat[m[Kâ€™
  Vector3f _Omega = Vector3f(_p, _q, _r[01;36m[K)[m[K; // angular velocity in inertial frame
                                       [01;36m[K^[m[K
In file included from [01m[K/usr/include/eigen3/Eigen/Core:458[m[K,
                 from [01m[K/usr/include/eigen3/Eigen/Dense:1[m[K,
                 from [01m[K/usr/include/eigen3/Eigen/Eigen:1[m[K,
                 from [01m[K/home/roku/workspace_jun/dt_test/src/dt_test_pkg/src/dynamic_model_quad.cpp:1[m[K,
                 from [01m[K/home/roku/workspace_jun/dt_test/src/dt_test_pkg/src/digital_twin.cpp:3[m[K:
[01m[K/usr/include/eigen3/Eigen/src/Core/Matrix.h:368:25:[m[K [01;36m[Knote: [m[Kcandidate: â€˜[01m[KEigen::Matrix<_Scalar, _Rows, _Cols, _Options, _MaxRows, _MaxCols>::Matrix(const Eigen::Matrix<_Scalar, _Rows, _Cols, _Options, _MaxRows, _MaxCols>&) [with _Scalar = float; int _Rows = 3; int _Cols = 1; int _Options = 0; int _MaxRows = 3; int _MaxCols = 1][m[Kâ€™
     EIGEN_STRONG_INLINE [01;36m[KMatrix[m[K(const Matrix& other) : Base(other)
                         [01;36m[K^~~~~~[m[K
[01m[K/usr/include/eigen3/Eigen/src/Core/Matrix.h:368:25:[m[K [01;36m[Knote: [m[K  candidate expects 1 argument, 3 provided
[01m[K/usr/include/eigen3/Eigen/src/Core/Matrix.h:355:25:[m[K [01;36m[Knote: [m[Kcandidate: â€˜[01m[KEigen::Matrix<_Scalar, _Rows, _Cols, _Options, _MaxRows, _MaxCols>::Matrix(const Scalar&, const Scalar&, const Scalar&, const Scalar&) [with _Scalar = float; int _Rows = 3; int _Cols = 1; int _Options = 0; int _MaxRows = 3; int _MaxCols = 1; Eigen::Matrix<_Scalar, _Rows, _Cols, _Options, _MaxRows, _MaxCols>::Scalar = float][m[Kâ€™
     EIGEN_STRONG_INLINE [01;36m[KMatrix[m[K(const Scalar& x, const Scalar& y, const Scalar& z, const Scalar& w)
                         [01;36m[K^~~~~~[m[K
[01m[K/usr/include/eigen3/Eigen/src/Core/Matrix.h:355:25:[m[K [01;36m[Knote: [m[K  candidate expects 4 arguments, 3 provided
[01m[K/usr/include/eigen3/Eigen/src/Core/Matrix.h:345:25:[m[K [01;36m[Knote: [m[Kcandidate: â€˜[01m[KEigen::Matrix<_Scalar, _Rows, _Cols, _Options, _MaxRows, _MaxCols>::Matrix(const Scalar&, const Scalar&, const Scalar&) [with _Scalar = float; int _Rows = 3; int _Cols = 1; int _Options = 0; int _MaxRows = 3; int _MaxCols = 1; Eigen::Matrix<_Scalar, _Rows, _Cols, _Options, _MaxRows, _MaxCols>::Scalar = float][m[Kâ€™
     EIGEN_STRONG_INLINE [01;36m[KMatrix[m[K(const Scalar& x, const Scalar& y, const Scalar& z)
                         [01;36m[K^~~~~~[m[K
[01m[K/usr/include/eigen3/Eigen/src/Core/Matrix.h:345:25:[m[K [01;36m[Knote: [m[K  no known conversion for argument 2 from â€˜[01m[KEigen::Vector3f[m[Kâ€™ {aka â€˜[01m[KEigen::Matrix<float, 3, 1>[m[Kâ€™} to â€˜[01m[Kconst Scalar&[m[Kâ€™ {aka â€˜[01m[Kconst float&[m[Kâ€™}
[01m[K/usr/include/eigen3/Eigen/src/Core/Matrix.h:299:25:[m[K [01;36m[Knote: [m[Kcandidate: â€˜[01m[Ktemplate<class T0, class T1> Eigen::Matrix<_Scalar, _Rows, _Cols, _Options, _MaxRows, _MaxCols>::Matrix(const T0&, const T1&)[m[Kâ€™
     EIGEN_STRONG_INLINE [01;36m[KMatrix[m[K(const T0& x, const T1& y)
                         [01;36m[K^~~~~~[m[K
[01m[K/usr/include/eigen3/Eigen/src/Core/Matrix.h:299:25:[m[K [01;36m[Knote: [m[K  template argument deduction/substitution failed:
In file included from [01m[K/home/roku/workspace_jun/dt_test/src/dt_test_pkg/src/digital_twin.cpp:3[m[K:
[01m[K/home/roku/workspace_jun/dt_test/src/dt_test_pkg/src/dynamic_model_quad.cpp:62:39:[m[K [01;36m[Knote: [m[K  candidate expects 2 arguments, 3 provided
  Vector3f _Omega = Vector3f(_p, _q, _r[01;36m[K)[m[K; // angular velocity in inertial frame
                                       [01;36m[K^[m[K
In file included from [01m[K/usr/include/eigen3/Eigen/Core:458[m[K,
                 from [01m[K/usr/include/eigen3/Eigen/Dense:1[m[K,
                 from [01m[K/usr/include/eigen3/Eigen/Eigen:1[m[K,
                 from [01m[K/home/roku/workspace_jun/dt_test/src/dt_test_pkg/src/dynamic_model_quad.cpp:1[m[K,
                 from [01m[K/home/roku/workspace_jun/dt_test/src/dt_test_pkg/src/digital_twin.cpp:3[m[K:
[01m[K/usr/include/eigen3/Eigen/src/Core/Matrix.h:291:34:[m[K [01;36m[Knote: [m[Kcandidate: â€˜[01m[Ktemplate<class T> Eigen::Matrix<_Scalar, _Rows, _Cols, _Options, _MaxRows, _MaxCols>::Matrix(const T&)[m[Kâ€™
     EIGEN_STRONG_INLINE explicit [01;36m[KMatrix[m[K(const T& x)
                                  [01;36m[K^~~~~~[m[K
[01m[K/usr/include/eigen3/Eigen/src/Core/Matrix.h:291:34:[m[K [01;36m[Knote: [m[K  template argument deduction/substitution failed:
In file included from [01m[K/home/roku/workspace_jun/dt_test/src/dt_test_pkg/src/digital_twin.cpp:3[m[K:
[01m[K/home/roku/workspace_jun/dt_test/src/dt_test_pkg/src/dynamic_model_quad.cpp:62:39:[m[K [01;36m[Knote: [m[K  candidate expects 1 argument, 3 provided
  Vector3f _Omega = Vector3f(_p, _q, _r[01;36m[K)[m[K; // angular velocity in inertial frame
                                       [01;36m[K^[m[K
In file included from [01m[K/usr/include/eigen3/Eigen/Core:458[m[K,
                 from [01m[K/usr/include/eigen3/Eigen/Dense:1[m[K,
                 from [01m[K/usr/include/eigen3/Eigen/Eigen:1[m[K,
                 from [01m[K/home/roku/workspace_jun/dt_test/src/dt_test_pkg/src/dynamic_model_quad.cpp:1[m[K,
                 from [01m[K/home/roku/workspace_jun/dt_test/src/dt_test_pkg/src/digital_twin.cpp:3[m[K:
[01m[K/usr/include/eigen3/Eigen/src/Core/Matrix.h:273:5:[m[K [01;36m[Knote: [m[Kcandidate: â€˜[01m[KEigen::Matrix<_Scalar, _Rows, _Cols, _Options, _MaxRows, _MaxCols>::Matrix(Eigen::Matrix<_Scalar, _Rows, _Cols, _Options, _MaxRows, _MaxCols>&&) [with _Scalar = float; int _Rows = 3; int _Cols = 1; int _Options = 0; int _MaxRows = 3; int _MaxCols = 1][m[Kâ€™
     [01;36m[KMatrix[m[K(Matrix&& other) EIGEN_NOEXCEPT_IF(std::is_nothrow_move_constructible<Scalar>::value)
     [01;36m[K^~~~~~[m[K
[01m[K/usr/include/eigen3/Eigen/src/Core/Matrix.h:273:5:[m[K [01;36m[Knote: [m[K  candidate expects 1 argument, 3 provided
[01m[K/usr/include/eigen3/Eigen/src/Core/Matrix.h:267:14:[m[K [01;36m[Knote: [m[Kcandidate: â€˜[01m[KEigen::Matrix<_Scalar, _Rows, _Cols, _Options, _MaxRows, _MaxCols>::Matrix(Eigen::internal::constructor_without_unaligned_array_assert) [with _Scalar = float; int _Rows = 3; int _Cols = 1; int _Options = 0; int _MaxRows = 3; int _MaxCols = 1][m[Kâ€™
     explicit [01;36m[KMatrix[m[K(internal::constructor_without_unaligned_array_assert)
              [01;36m[K^~~~~~[m[K
[01m[K/usr/include/eigen3/Eigen/src/Core/Matrix.h:267:14:[m[K [01;36m[Knote: [m[K  candidate expects 1 argument, 3 provided
[01m[K/usr/include/eigen3/Eigen/src/Core/Matrix.h:259:25:[m[K [01;36m[Knote: [m[Kcandidate: â€˜[01m[KEigen::Matrix<_Scalar, _Rows, _Cols, _Options, _MaxRows, _MaxCols>::Matrix() [with _Scalar = float; int _Rows = 3; int _Cols = 1; int _Options = 0; int _MaxRows = 3; int _MaxCols = 1][m[Kâ€™
     EIGEN_STRONG_INLINE [01;36m[KMatrix[m[K() : Base()
                         [01;36m[K^~~~~~[m[K
[01m[K/usr/include/eigen3/Eigen/src/Core/Matrix.h:259:25:[m[K [01;36m[Knote: [m[K  candidate expects 0 arguments, 3 provided
In file included from [01m[K/home/roku/workspace_jun/dt_test/src/dt_test_pkg/src/digital_twin.cpp:3[m[K:
[01m[K/home/roku/workspace_jun/dt_test/src/dt_test_pkg/src/dynamic_model_quad.cpp:64:18:[m[K [01;31m[Kerror: [m[Karray must be initialized with a brace-enclosed initializer
     float _u[0] =[01;31m[K0.0f[m[K, _u[1] =0.0f, _u[2] =0.0f, _u[3] = 0.0f; // motor ouput
                  [01;31m[K^~~~[m[K
[01m[K/home/roku/workspace_jun/dt_test/src/dt_test_pkg/src/dynamic_model_quad.cpp:64:31:[m[K [01;31m[Kerror: [m[Karray must be initialized with a brace-enclosed initializer
     float _u[0] =0.0f, _u[1] =[01;31m[K0.0f[m[K, _u[2] =0.0f, _u[3] = 0.0f; // motor ouput
                               [01;31m[K^~~~[m[K
[01m[K/home/roku/workspace_jun/dt_test/src/dt_test_pkg/src/dynamic_model_quad.cpp:64:44:[m[K [01;31m[Kerror: [m[Karray must be initialized with a brace-enclosed initializer
     float _u[0] =0.0f, _u[1] =0.0f, _u[2] =[01;31m[K0.0f[m[K, _u[3] = 0.0f; // motor ouput
                                            [01;31m[K^~~~[m[K
[01m[K/home/roku/workspace_jun/dt_test/src/dt_test_pkg/src/dynamic_model_quad.cpp:64:58:[m[K [01;31m[Kerror: [m[Karray must be initialized with a brace-enclosed initializer
     float _u[0] =0.0f, _u[1] =0.0f, _u[2] =0.0f, _u[3] = [01;31m[K0.0f[m[K; // motor ouput
                                                          [01;31m[K^~~~[m[K
[01m[K/home/roku/workspace_jun/dt_test/src/dt_test_pkg/src/dynamic_model_quad.cpp:65:19:[m[K [01;31m[Kerror: [m[Karray must be initialized with a brace-enclosed initializer
  float _omega[0] =[01;31m[K0.0f[m[K, _omega[1] =0.0f, _omega[2] =0.0f, _omega[3] = 0.0f; // angular velocity of motor
                   [01;31m[K^~~~[m[K
[01m[K/home/roku/workspace_jun/dt_test/src/dt_test_pkg/src/dynamic_model_quad.cpp:65:36:[m[K [01;31m[Kerror: [m[Karray must be initialized with a brace-enclosed initializer
  float _omega[0] =0.0f, _omega[1] =[01;31m[K0.0f[m[K, _omega[2] =0.0f, _omega[3] = 0.0f; // angular velocity of motor
                                    [01;31m[K^~~~[m[K
[01m[K/home/roku/workspace_jun/dt_test/src/dt_test_pkg/src/dynamic_model_quad.cpp:65:53:[m[K [01;31m[Kerror: [m[Karray must be initialized with a brace-enclosed initializer
  float _omega[0] =0.0f, _omega[1] =0.0f, _omega[2] =[01;31m[K0.0f[m[K, _omega[3] = 0.0f; // angular velocity of motor
                                                     [01;31m[K^~~~[m[K
[01m[K/home/roku/workspace_jun/dt_test/src/dt_test_pkg/src/dynamic_model_quad.cpp:65:71:[m[K [01;31m[Kerror: [m[Karray must be initialized with a brace-enclosed initializer
  float _omega[0] =0.0f, _omega[1] =0.0f, _omega[2] =0.0f, _omega[3] = [01;31m[K0.0f[m[K; // angular velocity of motor
                                                                       [01;31m[K^~~~[m[K
[01m[K/home/roku/workspace_jun/dt_test/src/dt_test_pkg/src/dynamic_model_quad.cpp:83:43:[m[K [01;31m[Kerror: [m[Kno matching function for call to â€˜[01m[KEigen::Matrix<float, 3, 1>::Matrix(float&, Eigen::Vector3f&, float&)[m[Kâ€™
  Vector3f _Omega_dot = Vector3f(_p, _q, _r[01;31m[K)[m[K; // angular acceleration in inertial frame
                                           [01;31m[K^[m[K
In file included from [01m[K/usr/include/eigen3/Eigen/Core:458[m[K,
                 from [01m[K/usr/include/eigen3/Eigen/Dense:1[m[K,
                 from [01m[K/usr/include/eigen3/Eigen/Eigen:1[m[K,
                 from [01m[K/home/roku/workspace_jun/dt_test/src/dt_test_pkg/src/dynamic_model_quad.cpp:1[m[K,
                 from [01m[K/home/roku/workspace_jun/dt_test/src/dt_test_pkg/src/digital_twin.cpp:3[m[K:
[01m[K/usr/include/eigen3/Eigen/src/Core/Matrix.h:387:14:[m[K [01;36m[Knote: [m[Kcandidate: â€˜[01m[Ktemplate<class OtherDerived> Eigen::Matrix<_Scalar, _Rows, _Cols, _Options, _MaxRows, _MaxCols>::Matrix(const Eigen::RotationBase<OtherDerived, ColsAtCompileTime>&)[m[Kâ€™
     explicit [01;36m[KMatrix[m[K(const RotationBase<OtherDerived,ColsAtCompileTime>& r);
              [01;36m[K^~~~~~[m[K
[01m[K/usr/include/eigen3/Eigen/src/Core/Matrix.h:387:14:[m[K [01;36m[Knote: [m[K  template argument deduction/substitution failed:
In file included from [01m[K/home/roku/workspace_jun/dt_test/src/dt_test_pkg/src/digital_twin.cpp:3[m[K:
[01m[K/home/roku/workspace_jun/dt_test/src/dt_test_pkg/src/dynamic_model_quad.cpp:83:43:[m[K [01;36m[Knote: [m[K  mismatched types â€˜[01m[Kconst Eigen::RotationBase<OtherDerived, 1>[m[Kâ€™ and â€˜[01m[Kfloat[m[Kâ€™
  Vector3f _Omega_dot = Vector3f(_p, _q, _r[01;36m[K)[m[K; // angular acceleration in inertial frame
                                           [01;36m[K^[m[K
In file included from [01m[K/usr/include/eigen3/Eigen/Core:458[m[K,
                 from [01m[K/usr/include/eigen3/Eigen/Dense:1[m[K,
                 from [01m[K/usr/include/eigen3/Eigen/Eigen:1[m[K,
                 from [01m[K/home/roku/workspace_jun/dt_test/src/dt_test_pkg/src/dynamic_model_quad.cpp:1[m[K,
                 from [01m[K/home/roku/workspace_jun/dt_test/src/dt_test_pkg/src/digital_twin.cpp:3[m[K:
[01m[K/usr/include/eigen3/Eigen/src/Core/Matrix.h:376:25:[m[K [01;36m[Knote: [m[Kcandidate: â€˜[01m[Ktemplate<class OtherDerived> Eigen::Matrix<_Scalar, _Rows, _Cols, _Options, _MaxRows, _MaxCols>::Matrix(const Eigen::EigenBase<OtherDerived>&)[m[Kâ€™
     EIGEN_STRONG_INLINE [01;36m[KMatrix[m[K(const EigenBase<OtherDerived> &other)
                         [01;36m[K^~~~~~[m[K
[01m[K/usr/include/eigen3/Eigen/src/Core/Matrix.h:376:25:[m[K [01;36m[Knote: [m[K  template argument deduction/substitution failed:
In file included from [01m[K/home/roku/workspace_jun/dt_test/src/dt_test_pkg/src/digital_twin.cpp:3[m[K:
[01m[K/home/roku/workspace_jun/dt_test/src/dt_test_pkg/src/dynamic_model_quad.cpp:83:43:[m[K [01;36m[Knote: [m[K  mismatched types â€˜[01m[Kconst Eigen::EigenBase<Derived>[m[Kâ€™ and â€˜[01m[Kfloat[m[Kâ€™
  Vector3f _Omega_dot = Vector3f(_p, _q, _r[01;36m[K)[m[K; // angular acceleration in inertial frame
                                           [01;36m[K^[m[K
In file included from [01m[K/usr/include/eigen3/Eigen/Core:458[m[K,
                 from [01m[K/usr/include/eigen3/Eigen/Dense:1[m[K,
                 from [01m[K/usr/include/eigen3/Eigen/Eigen:1[m[K,
                 from [01m[K/home/roku/workspace_jun/dt_test/src/dt_test_pkg/src/dynamic_model_quad.cpp:1[m[K,
                 from [01m[K/home/roku/workspace_jun/dt_test/src/dt_test_pkg/src/digital_twin.cpp:3[m[K:
[01m[K/usr/include/eigen3/Eigen/src/Core/Matrix.h:368:25:[m[K [01;36m[Knote: [m[Kcandidate: â€˜[01m[KEigen::Matrix<_Scalar, _Rows, _Cols, _Options, _MaxRows, _MaxCols>::Matrix(const Eigen::Matrix<_Scalar, _Rows, _Cols, _Options, _MaxRows, _MaxCols>&) [with _Scalar = float; int _Rows = 3; int _Cols = 1; int _Options = 0; int _MaxRows = 3; int _MaxCols = 1][m[Kâ€™
     EIGEN_STRONG_INLINE [01;36m[KMatrix[m[K(const Matrix& other) : Base(other)
                         [01;36m[K^~~~~~[m[K
[01m[K/usr/include/eigen3/Eigen/src/Core/Matrix.h:368:25:[m[K [01;36m[Knote: [m[K  candidate expects 1 argument, 3 provided
[01m[K/usr/include/eigen3/Eigen/src/Core/Matrix.h:355:25:[m[K [01;36m[Knote: [m[Kcandidate: â€˜[01m[KEigen::Matrix<_Scalar, _Rows, _Cols, _Options, _MaxRows, _MaxCols>::Matrix(const Scalar&, const Scalar&, const Scalar&, const Scalar&) [with _Scalar = float; int _Rows = 3; int _Cols = 1; int _Options = 0; int _MaxRows = 3; int _MaxCols = 1; Eigen::Matrix<_Scalar, _Rows, _Cols, _Options, _MaxRows, _MaxCols>::Scalar = float][m[Kâ€™
     EIGEN_STRONG_INLINE [01;36m[KMatrix[m[K(const Scalar& x, const Scalar& y, const Scalar& z, const Scalar& w)
                         [01;36m[K^~~~~~[m[K
[01m[K/usr/include/eigen3/Eigen/src/Core/Matrix.h:355:25:[m[K [01;36m[Knote: [m[K  candidate expects 4 arguments, 3 provided
[01m[K/usr/include/eigen3/Eigen/src/Core/Matrix.h:345:25:[m[K [01;36m[Knote: [m[Kcandidate: â€˜[01m[KEigen::Matrix<_Scalar, _Rows, _Cols, _Options, _MaxRows, _MaxCols>::Matrix(const Scalar&, const Scalar&, const Scalar&) [with _Scalar = float; int _Rows = 3; int _Cols = 1; int _Options = 0; int _MaxRows = 3; int _MaxCols = 1; Eigen::Matrix<_Scalar, _Rows, _Cols, _Options, _MaxRows, _MaxCols>::Scalar = float][m[Kâ€™
     EIGEN_STRONG_INLINE [01;36m[KMatrix[m[K(const Scalar& x, const Scalar& y, const Scalar& z)
                         [01;36m[K^~~~~~[m[K
[01m[K/usr/include/eigen3/Eigen/src/Core/Matrix.h:345:25:[m[K [01;36m[Knote: [m[K  no known conversion for argument 2 from â€˜[01m[KEigen::Vector3f[m[Kâ€™ {aka â€˜[01m[KEigen::Matrix<float, 3, 1>[m[Kâ€™} to â€˜[01m[Kconst Scalar&[m[Kâ€™ {aka â€˜[01m[Kconst float&[m[Kâ€™}
[01m[K/usr/include/eigen3/Eigen/src/Core/Matrix.h:299:25:[m[K [01;36m[Knote: [m[Kcandidate: â€˜[01m[Ktemplate<class T0, class T1> Eigen::Matrix<_Scalar, _Rows, _Cols, _Options, _MaxRows, _MaxCols>::Matrix(const T0&, const T1&)[m[Kâ€™
     EIGEN_STRONG_INLINE [01;36m[KMatrix[m[K(const T0& x, const T1& y)
                         [01;36m[K^~~~~~[m[K
[01m[K/usr/include/eigen3/Eigen/src/Core/Matrix.h:299:25:[m[K [01;36m[Knote: [m[K  template argument deduction/substitution failed:
In file included from [01m[K/home/roku/workspace_jun/dt_test/src/dt_test_pkg/src/digital_twin.cpp:3[m[K:
[01m[K/home/roku/workspace_jun/dt_test/src/dt_test_pkg/src/dynamic_model_quad.cpp:83:43:[m[K [01;36m[Knote: [m[K  candidate expects 2 arguments, 3 provided
  Vector3f _Omega_dot = Vector3f(_p, _q, _r[01;36m[K)[m[K; // angular acceleration in inertial frame
                                           [01;36m[K^[m[K
In file included from [01m[K/usr/include/eigen3/Eigen/Core:458[m[K,
                 from [01m[K/usr/include/eigen3/Eigen/Dense:1[m[K,
                 from [01m[K/usr/include/eigen3/Eigen/Eigen:1[m[K,
                 from [01m[K/home/roku/workspace_jun/dt_test/src/dt_test_pkg/src/dynamic_model_quad.cpp:1[m[K,
                 from [01m[K/home/roku/workspace_jun/dt_test/src/dt_test_pkg/src/digital_twin.cpp:3[m[K:
[01m[K/usr/include/eigen3/Eigen/src/Core/Matrix.h:291:34:[m[K [01;36m[Knote: [m[Kcandidate: â€˜[01m[Ktemplate<class T> Eigen::Matrix<_Scalar, _Rows, _Cols, _Options, _MaxRows, _MaxCols>::Matrix(const T&)[m[Kâ€™
     EIGEN_STRONG_INLINE explicit [01;36m[KMatrix[m[K(const T& x)
                                  [01;36m[K^~~~~~[m[K
[01m[K/usr/include/eigen3/Eigen/src/Core/Matrix.h:291:34:[m[K [01;36m[Knote: [m[K  template argument deduction/substitution failed:
In file included from [01m[K/home/roku/workspace_jun/dt_test/src/dt_test_pkg/src/digital_twin.cpp:3[m[K:
[01m[K/home/roku/workspace_jun/dt_test/src/dt_test_pkg/src/dynamic_model_quad.cpp:83:43:[m[K [01;36m[Knote: [m[K  candidate expects 1 argument, 3 provided
  Vector3f _Omega_dot = Vector3f(_p, _q, _r[01;36m[K)[m[K; // angular acceleration in inertial frame
                                           [01;36m[K^[m[K
In file included from [01m[K/usr/include/eigen3/Eigen/Core:458[m[K,
                 from [01m[K/usr/include/eigen3/Eigen/Dense:1[m[K,
                 from [01m[K/usr/include/eigen3/Eigen/Eigen:1[m[K,
                 from [01m[K/home/roku/workspace_jun/dt_test/src/dt_test_pkg/src/dynamic_model_quad.cpp:1[m[K,
                 from [01m[K/home/roku/workspace_jun/dt_test/src/dt_test_pkg/src/digital_twin.cpp:3[m[K:
[01m[K/usr/include/eigen3/Eigen/src/Core/Matrix.h:273:5:[m[K [01;36m[Knote: [m[Kcandidate: â€˜[01m[KEigen::Matrix<_Scalar, _Rows, _Cols, _Options, _MaxRows, _MaxCols>::Matrix(Eigen::Matrix<_Scalar, _Rows, _Cols, _Options, _MaxRows, _MaxCols>&&) [with _Scalar = float; int _Rows = 3; int _Cols = 1; int _Options = 0; int _MaxRows = 3; int _MaxCols = 1][m[Kâ€™
     [01;36m[KMatrix[m[K(Matrix&& other) EIGEN_NOEXCEPT_IF(std::is_nothrow_move_constructible<Scalar>::value)
     [01;36m[K^~~~~~[m[K
[01m[K/usr/include/eigen3/Eigen/src/Core/Matrix.h:273:5:[m[K [01;36m[Knote: [m[K  candidate expects 1 argument, 3 provided
[01m[K/usr/include/eigen3/Eigen/src/Core/Matrix.h:267:14:[m[K [01;36m[Knote: [m[Kcandidate: â€˜[01m[KEigen::Matrix<_Scalar, _Rows, _Cols, _Options, _MaxRows, _MaxCols>::Matrix(Eigen::internal::constructor_without_unaligned_array_assert) [with _Scalar = float; int _Rows = 3; int _Cols = 1; int _Options = 0; int _MaxRows = 3; int _MaxCols = 1][m[Kâ€™
     explicit [01;36m[KMatrix[m[K(internal::constructor_without_unaligned_array_assert)
              [01;36m[K^~~~~~[m[K
[01m[K/usr/include/eigen3/Eigen/src/Core/Matrix.h:267:14:[m[K [01;36m[Knote: [m[K  candidate expects 1 argument, 3 provided
[01m[K/usr/include/eigen3/Eigen/src/Core/Matrix.h:259:25:[m[K [01;36m[Knote: [m[Kcandidate: â€˜[01m[KEigen::Matrix<_Scalar, _Rows, _Cols, _Options, _MaxRows, _MaxCols>::Matrix() [with _Scalar = float; int _Rows = 3; int _Cols = 1; int _Options = 0; int _MaxRows = 3; int _MaxCols = 1][m[Kâ€™
     EIGEN_STRONG_INLINE [01;36m[KMatrix[m[K() : Base()
                         [01;36m[K^~~~~~[m[K
[01m[K/usr/include/eigen3/Eigen/src/Core/Matrix.h:259:25:[m[K [01;36m[Knote: [m[K  candidate expects 0 arguments, 3 provided
In file included from [01m[K/home/roku/workspace_jun/dt_test/src/dt_test_pkg/src/digital_twin.cpp:3[m[K:
[01m[K/home/roku/workspace_jun/dt_test/src/dt_test_pkg/src/dynamic_model_quad.cpp:[m[K In member function â€˜[01m[Kvoid QuadDynamicModel::updateForceandMoment()[m[Kâ€™:
[01m[K/home/roku/workspace_jun/dt_test/src/dt_test_pkg/src/dynamic_model_quad.cpp:151:9:[m[K [01;31m[Kerror: [m[Kâ€˜[01m[K_D[m[Kâ€™ was not declared in this scope
         [01;31m[K_D[m[K = - _C_D * std::abs(_relative_velocity) * _relative_velocity;
         [01;31m[K^~[m[K
[01m[K/home/roku/workspace_jun/dt_test/src/dt_test_pkg/src/dynamic_model_quad.cpp:151:9:[m[K [01;36m[Knote: [m[Ksuggested alternative: â€˜[01m[K_v[m[Kâ€™
         [01;36m[K_D[m[K = - _C_D * std::abs(_relative_velocity) * _relative_velocity;
         [01;36m[K^~[m[K
         [32m[K_v[m[K
[01m[K/home/roku/workspace_jun/dt_test/src/dt_test_pkg/src/dynamic_model_quad.cpp:151:50:[m[K [01;31m[Kerror: [m[Kno matching function for call to â€˜[01m[Kabs(Eigen::Vector3f&)[m[Kâ€™
         _D = - _C_D * std::abs(_relative_velocity[01;31m[K)[m[K * _relative_velocity;
                                                  [01;31m[K^[m[K
In file included from [01m[K/usr/include/c++/8/cstdlib:77[m[K,
                 from [01m[K/usr/include/boost/config/platform/linux.hpp:15[m[K,
                 from [01m[K/usr/include/boost/config.hpp:57[m[K,
                 from [01m[K/usr/include/boost/type_traits/remove_reference.hpp:12[m[K,
                 from [01m[K/opt/ros/noetic/include/ros/service_traits.h:31[m[K,
                 from [01m[K/home/roku/workspace_jun/dt_test/devel/.private/dt_test_pkg/include/dt_test_pkg/ControlEval.h:8[m[K,
                 from [01m[K/home/roku/workspace_jun/dt_test/src/dt_test_pkg/src/digital_twin.cpp:2[m[K:
[01m[K/usr/include/c++/8/bits/std_abs.h:56:3:[m[K [01;36m[Knote: [m[Kcandidate: â€˜[01m[Klong int std::abs(long int)[m[Kâ€™
   [01;36m[Kabs[m[K(long __i) { return __builtin_labs(__i); }
   [01;36m[K^~~[m[K
[01m[K/usr/include/c++/8/bits/std_abs.h:56:3:[m[K [01;36m[Knote: [m[K  no known conversion for argument 1 from â€˜[01m[KEigen::Vector3f[m[Kâ€™ {aka â€˜[01m[KEigen::Matrix<float, 3, 1>[m[Kâ€™} to â€˜[01m[Klong int[m[Kâ€™
[01m[K/usr/include/c++/8/bits/std_abs.h:61:3:[m[K [01;36m[Knote: [m[Kcandidate: â€˜[01m[Klong long int std::abs(long long int)[m[Kâ€™
   [01;36m[Kabs[m[K(long long __x) { return __builtin_llabs (__x); }
   [01;36m[K^~~[m[K
[01m[K/usr/include/c++/8/bits/std_abs.h:61:3:[m[K [01;36m[Knote: [m[K  no known conversion for argument 1 from â€˜[01m[KEigen::Vector3f[m[Kâ€™ {aka â€˜[01m[KEigen::Matrix<float, 3, 1>[m[Kâ€™} to â€˜[01m[Klong long int[m[Kâ€™
[01m[K/usr/include/c++/8/bits/std_abs.h:70:3:[m[K [01;36m[Knote: [m[Kcandidate: â€˜[01m[Kconstexpr double std::abs(double)[m[Kâ€™
   [01;36m[Kabs[m[K(double __x)
   [01;36m[K^~~[m[K
[01m[K/usr/include/c++/8/bits/std_abs.h:70:3:[m[K [01;36m[Knote: [m[K  no known conversion for argument 1 from â€˜[01m[KEigen::Vector3f[m[Kâ€™ {aka â€˜[01m[KEigen::Matrix<float, 3, 1>[m[Kâ€™} to â€˜[01m[Kdouble[m[Kâ€™
[01m[K/usr/include/c++/8/bits/std_abs.h:74:3:[m[K [01;36m[Knote: [m[Kcandidate: â€˜[01m[Kconstexpr float std::abs(float)[m[Kâ€™
   [01;36m[Kabs[m[K(float __x)
   [01;36m[K^~~[m[K
[01m[K/usr/include/c++/8/bits/std_abs.h:74:3:[m[K [01;36m[Knote: [m[K  no known conversion for argument 1 from â€˜[01m[KEigen::Vector3f[m[Kâ€™ {aka â€˜[01m[KEigen::Matrix<float, 3, 1>[m[Kâ€™} to â€˜[01m[Kfloat[m[Kâ€™
[01m[K/usr/include/c++/8/bits/std_abs.h:78:3:[m[K [01;36m[Knote: [m[Kcandidate: â€˜[01m[Kconstexpr long double std::abs(long double)[m[Kâ€™
   [01;36m[Kabs[m[K(long double __x)
   [01;36m[K^~~[m[K
[01m[K/usr/include/c++/8/bits/std_abs.h:78:3:[m[K [01;36m[Knote: [m[K  no known conversion for argument 1 from â€˜[01m[KEigen::Vector3f[m[Kâ€™ {aka â€˜[01m[KEigen::Matrix<float, 3, 1>[m[Kâ€™} to â€˜[01m[Klong double[m[Kâ€™
[01m[K/usr/include/c++/8/bits/std_abs.h:84:3:[m[K [01;36m[Knote: [m[Kcandidate: â€˜[01m[Kconstexpr __int128 std::abs(__int128)[m[Kâ€™
   [01;36m[Kabs[m[K(__GLIBCXX_TYPE_INT_N_0 __x) { return __x >= 0 ? __x : -__x; }
   [01;36m[K^~~[m[K
[01m[K/usr/include/c++/8/bits/std_abs.h:84:3:[m[K [01;36m[Knote: [m[K  no known conversion for argument 1 from â€˜[01m[KEigen::Vector3f[m[Kâ€™ {aka â€˜[01m[KEigen::Matrix<float, 3, 1>[m[Kâ€™} to â€˜[01m[K__int128[m[Kâ€™
[01m[K/usr/include/c++/8/bits/std_abs.h:102:3:[m[K [01;36m[Knote: [m[Kcandidate: â€˜[01m[Kconstexpr __float128 std::abs(__float128)[m[Kâ€™
   [01;36m[Kabs[m[K(__float128 __x)
   [01;36m[K^~~[m[K
[01m[K/usr/include/c++/8/bits/std_abs.h:102:3:[m[K [01;36m[Knote: [m[K  no known conversion for argument 1 from â€˜[01m[KEigen::Vector3f[m[Kâ€™ {aka â€˜[01m[KEigen::Matrix<float, 3, 1>[m[Kâ€™} to â€˜[01m[K__float128[m[Kâ€™
In file included from [01m[K/usr/include/boost/config/no_tr1/complex.hpp:21[m[K,
                 from [01m[K/usr/include/boost/math/policies/error_handling.hpp:17[m[K,
                 from [01m[K/usr/include/boost/math/special_functions/round.hpp:14[m[K,
                 from [01m[K/opt/ros/noetic/include/ros/time.h:58[m[K,
                 from [01m[K/opt/ros/noetic/include/ros/serialization.h:34[m[K,
                 from [01m[K/home/roku/workspace_jun/dt_test/devel/.private/dt_test_pkg/include/dt_test_pkg/ControlEvalRequest.h:14[m[K,
                 from [01m[K/home/roku/workspace_jun/dt_test/devel/.private/dt_test_pkg/include/dt_test_pkg/ControlEval.h:11[m[K,
                 from [01m[K/home/roku/workspace_jun/dt_test/src/dt_test_pkg/src/digital_twin.cpp:2[m[K:
[01m[K/usr/include/c++/8/complex:618:5:[m[K [01;36m[Knote: [m[Kcandidate: â€˜[01m[Ktemplate<class _Tp> _Tp std::abs(const std::complex<_Tp>&)[m[Kâ€™
     [01;36m[Kabs[m[K(const complex<_Tp>& __z) { return __complex_abs(__z.__rep()); }
     [01;36m[K^~~[m[K
[01m[K/usr/include/c++/8/complex:618:5:[m[K [01;36m[Knote: [m[K  template argument deduction/substitution failed:
In file included from [01m[K/home/roku/workspace_jun/dt_test/src/dt_test_pkg/src/digital_twin.cpp:3[m[K:
[01m[K/home/roku/workspace_jun/dt_test/src/dt_test_pkg/src/dynamic_model_quad.cpp:151:50:[m[K [01;36m[Knote: [m[K  â€˜[01m[KEigen::Vector3f[m[Kâ€™ {aka â€˜[01m[KEigen::Matrix<float, 3, 1>[m[Kâ€™} is not derived from â€˜[01m[Kconst std::complex<_Tp>[m[Kâ€™
         _D = - _C_D * std::abs(_relative_velocity[01;36m[K)[m[K * _relative_velocity;
                                                  [01;36m[K^[m[K
In file included from [01m[K/usr/include/c++/8/cstdlib:75[m[K,
                 from [01m[K/usr/include/boost/config/platform/linux.hpp:15[m[K,
                 from [01m[K/usr/include/boost/config.hpp:57[m[K,
                 from [01m[K/usr/include/boost/type_traits/remove_reference.hpp:12[m[K,
                 from [01m[K/opt/ros/noetic/include/ros/service_traits.h:31[m[K,
                 from [01m[K/home/roku/workspace_jun/dt_test/devel/.private/dt_test_pkg/include/dt_test_pkg/ControlEval.h:8[m[K,
                 from [01m[K/home/roku/workspace_jun/dt_test/src/dt_test_pkg/src/digital_twin.cpp:2[m[K:
[01m[K/usr/include/stdlib.h:840:12:[m[K [01;36m[Knote: [m[Kcandidate: â€˜[01m[Kint abs(int)[m[Kâ€™
 extern int [01;36m[Kabs[m[K (int __x) __THROW __attribute__ ((__const__)) __wur;
            [01;36m[K^~~[m[K
[01m[K/usr/include/stdlib.h:840:12:[m[K [01;36m[Knote: [m[K  no known conversion for argument 1 from â€˜[01m[KEigen::Vector3f[m[Kâ€™ {aka â€˜[01m[KEigen::Matrix<float, 3, 1>[m[Kâ€™} to â€˜[01m[Kint[m[Kâ€™
In file included from [01m[K/home/roku/workspace_jun/dt_test/src/dt_test_pkg/src/digital_twin.cpp:3[m[K:
[01m[K/home/roku/workspace_jun/dt_test/src/dt_test_pkg/src/dynamic_model_quad.cpp:155:14:[m[K [01;31m[Kerror: [m[Kâ€˜[01m[Ki[m[Kâ€™ was not declared in this scope
         for ([01;31m[Ki[m[K=0; i<3; i++){
              [01;31m[K^[m[K
[01m[K/home/roku/workspace_jun/dt_test/src/dt_test_pkg/src/dynamic_model_quad.cpp:156:28:[m[K [01;31m[Kerror: [m[Kâ€˜[01m[Krho[m[Kâ€™ was not declared in this scope
             _T[i] = _C_T * [01;31m[Krho[m[K * M_PI * pow(R, 4) * pow(_omega[i],2);
                            [01;31m[K^~~[m[K
[01m[K/home/roku/workspace_jun/dt_test/src/dt_test_pkg/src/dynamic_model_quad.cpp:164:14:[m[K [01;31m[Kerror: [m[Kâ€˜[01m[Ki[m[Kâ€™ was not declared in this scope
         for ([01;31m[Ki[m[K=0; i<3; i++){
              [01;31m[K^[m[K
In file included from [01m[K/usr/include/eigen3/Eigen/Core:366[m[K,
                 from [01m[K/usr/include/eigen3/Eigen/Dense:1[m[K,
                 from [01m[K/usr/include/eigen3/Eigen/Eigen:1[m[K,
                 from [01m[K/home/roku/workspace_jun/dt_test/src/dt_test_pkg/src/dynamic_model_quad.cpp:1[m[K,
                 from [01m[K/home/roku/workspace_jun/dt_test/src/dt_test_pkg/src/digital_twin.cpp:3[m[K:
/usr/include/eigen3/Eigen/src/Core/GeneralProduct.h: In instantiation of â€˜[01m[Kconst Eigen::Product<Derived, OtherDerived> Eigen::MatrixBase<Derived>::operator*(const Eigen::MatrixBase<OtherDerived>&) const [with OtherDerived = Eigen::Matrix<float, 3, 1>; Derived = Eigen::Matrix<float, 3, 1>][m[Kâ€™:
[01m[K/home/roku/workspace_jun/dt_test/src/dt_test_pkg/src/dynamic_model_quad.cpp:158:35:[m[K   required from here
[01m[K/usr/include/eigen3/Eigen/src/Core/GeneralProduct.h:406:38:[m[K [01;31m[Kerror: [m[Kstatic assertion failed: INVALID_VECTOR_VECTOR_PRODUCT__IF_YOU_WANTED_A_DOT_OR_COEFF_WISE_PRODUCT_YOU_MUST_USE_THE_EXPLICIT_FUNCTIONS
   EIGEN_STATIC_ASSERT([01;31m[KProductIsValid || !(AreVectors && SameSizes)[m[K,
                       [01;31m[K~~~~~~~~~~~~~~~^~~~~~~~~~~~~~~~~~~~~~~~~~~~~[m[K
[01m[K/usr/include/eigen3/Eigen/src/Core/util/StaticAssert.h:33:54:[m[K [01;36m[Knote: [m[Kin definition of macro â€˜[01m[KEIGEN_STATIC_ASSERT[m[Kâ€™
     #define EIGEN_STATIC_ASSERT(X,MSG) static_assert([01;36m[KX[m[K,#MSG);
                                                      [01;36m[K^[m[K
/usr/include/eigen3/Eigen/src/Core/GeneralProduct.h: In instantiation of â€˜[01m[Kconst Eigen::Product<Derived, OtherDerived, 1> Eigen::MatrixBase<Derived>::lazyProduct(const Eigen::MatrixBase<OtherDerived>&) const [with OtherDerived = Eigen::Matrix<float, 3, 1>; Derived = Eigen::Matrix<float, 3, 1>][m[Kâ€™:
[01m[K/usr/include/eigen3/Eigen/src/Core/ProductEvaluators.h:404:29:[m[K   required from â€˜[01m[Kstatic void Eigen::internal::generic_product_impl<Lhs, Rhs, Eigen::DenseShape, Eigen::DenseShape, 3>::addTo(Dst&, const Lhs&, const Rhs&) [with Dst = Eigen::Matrix<float, 3, 1>; Lhs = Eigen::Matrix<float, 3, 1>; Rhs = Eigen::Matrix<float, 3, 1>][m[Kâ€™
[01m[K/usr/include/eigen3/Eigen/src/Core/ProductEvaluators.h:163:42:[m[K   required from â€˜[01m[Kstatic void Eigen::internal::Assignment<DstXprType, Eigen::Product<Lhs, Rhs, Options>, Eigen::internal::add_assign_op<Scalar, Scalar>, Eigen::internal::Dense2Dense, typename Eigen::internal::enable_if<((Options == DefaultProduct) || (Options == AliasFreeProduct))>::type>::run(DstXprType&, const SrcXprType&, const Eigen::internal::add_assign_op<Scalar, Scalar>&) [with DstXprType = Eigen::Matrix<float, 3, 1>; Lhs = Eigen::Matrix<float, 3, 1>; Rhs = Eigen::Matrix<float, 3, 1>; int Options = 0; Scalar = float; Eigen::internal::Assignment<DstXprType, Eigen::Product<Lhs, Rhs, Options>, Eigen::internal::add_assign_op<Scalar, Scalar>, Eigen::internal::Dense2Dense, typename Eigen::internal::enable_if<((Options == DefaultProduct) || (Options == AliasFreeProduct))>::type>::SrcXprType = Eigen::Product<Eigen::Matrix<float, 3, 1>, Eigen::Matrix<float, 3, 1>, 0>][m[Kâ€™
[01m[K/usr/include/eigen3/Eigen/src/Core/AssignEvaluator.h:836:49:[m[K   required from â€˜[01m[Kvoid Eigen::internal::call_assignment_no_alias(Dst&, const Src&, const Func&) [with Dst = Eigen::Matrix<float, 3, 1>; Src = Eigen::Product<Eigen::Matrix<float, 3, 1>, Eigen::Matrix<float, 3, 1>, 0>; Func = Eigen::internal::add_assign_op<float, float>][m[Kâ€™
[01m[K/usr/include/eigen3/Eigen/src/Core/ProductEvaluators.h:224:29:[m[K   required from â€˜[01m[Kstatic void Eigen::internal::assignment_from_xpr_op_product<DstXprType, OtherXpr, ProductType, Func1, Func2>::run(DstXprType&, const SrcXprType&, const InitialFunc&) [with SrcXprType = Eigen::CwiseBinaryOp<Eigen::internal::scalar_sum_op<float, float>, const Eigen::CwiseBinaryOp<Eigen::internal::scalar_sum_op<float, float>, const Eigen::CwiseBinaryOp<Eigen::internal::scalar_sum_op<float, float>, const Eigen::Product<Eigen::Matrix<float, 3, 1>, Eigen::Matrix<float, 3, 1>, 0>, const Eigen::Product<Eigen::Matrix<float, 3, 1>, Eigen::Matrix<float, 3, 1>, 0> >, const Eigen::Product<Eigen::Matrix<float, 3, 1>, Eigen::Matrix<float, 3, 1>, 0> >, const Eigen::Product<Eigen::Matrix<float, 3, 1>, Eigen::Matrix<float, 3, 1>, 0> >; InitialFunc = Eigen::internal::assign_op<float, float>; DstXprType = Eigen::Matrix<float, 3, 1>; OtherXpr = Eigen::CwiseBinaryOp<Eigen::internal::scalar_sum_op<float, float>, const Eigen::CwiseBinaryOp<Eigen::internal::scalar_sum_op<float, float>, const Eigen::Product<Eigen::Matrix<float, 3, 1>, Eigen::Matrix<float, 3, 1>, 0>, const Eigen::Product<Eigen::Matrix<float, 3, 1>, Eigen::Matrix<float, 3, 1>, 0> >, const Eigen::Product<Eigen::Matrix<float, 3, 1>, Eigen::Matrix<float, 3, 1>, 0> >; ProductType = Eigen::Product<Eigen::Matrix<float, 3, 1>, Eigen::Matrix<float, 3, 1>, 0>; Func1 = Eigen::internal::assign_op<float, float>; Func2 = Eigen::internal::add_assign_op<float, float>][m[Kâ€™
[01m[K/usr/include/eigen3/Eigen/src/Core/AssignEvaluator.h:836:49:[m[K   required from â€˜[01m[Kvoid Eigen::internal::call_assignment_no_alias(Dst&, const Src&, const Func&) [with Dst = Eigen::Matrix<float, 3, 1>; Src = Eigen::CwiseBinaryOp<Eigen::internal::scalar_sum_op<float, float>, const Eigen::CwiseBinaryOp<Eigen::internal::scalar_sum_op<float, float>, const Eigen::CwiseBinaryOp<Eigen::internal::scalar_sum_op<float, float>, const Eigen::Product<Eigen::Matrix<float, 3, 1>, Eigen::Matrix<float, 3, 1>, 0>, const Eigen::Product<Eigen::Matrix<float, 3, 1>, Eigen::Matrix<float, 3, 1>, 0> >, const Eigen::Product<Eigen::Matrix<float, 3, 1>, Eigen::Matrix<float, 3, 1>, 0> >, const Eigen::Product<Eigen::Matrix<float, 3, 1>, Eigen::Matrix<float, 3, 1>, 0> >; Func = Eigen::internal::assign_op<float, float>][m[Kâ€™
[01m[K/usr/include/eigen3/Eigen/src/Core/PlainObjectBase.h:732:41:[m[K   [ skipping 2 instantiation contexts, use -ftemplate-backtrace-limit=0 to disable ]
[01m[K/usr/include/eigen3/Eigen/src/Core/Matrix.h:294:31:[m[K   required from â€˜[01m[KEigen::Matrix<_Scalar, _Rows, _Cols, _Options, _MaxRows, _MaxCols>::Matrix(const T&) [with T = Eigen::CwiseBinaryOp<Eigen::internal::scalar_sum_op<float, float>, const Eigen::CwiseBinaryOp<Eigen::internal::scalar_sum_op<float, float>, const Eigen::CwiseBinaryOp<Eigen::internal::scalar_sum_op<float, float>, const Eigen::Product<Eigen::Matrix<float, 3, 1>, Eigen::Matrix<float, 3, 1>, 0>, const Eigen::Product<Eigen::Matrix<float, 3, 1>, Eigen::Matrix<float, 3, 1>, 0> >, const Eigen::Product<Eigen::Matrix<float, 3, 1>, Eigen::Matrix<float, 3, 1>, 0> >, const Eigen::Product<Eigen::Matrix<float, 3, 1>, Eigen::Matrix<float, 3, 1>, 0> >; _Scalar = float; int _Rows = 3; int _Cols = 1; int _Options = 0; int _MaxRows = 3; int _MaxCols = 1][m[Kâ€™
[01m[K/usr/include/eigen3/Eigen/src/Core/AssignEvaluator.h:796:41:[m[K   required from â€˜[01m[Kvoid Eigen::internal::call_assignment(Dst&, const Src&, const Func&, typename Eigen::internal::enable_if<Eigen::internal::evaluator_assume_aliasing<Src>::value, void*>::type) [with Dst = Eigen::Matrix<float, 3, 1>; Src = Eigen::CwiseBinaryOp<Eigen::internal::scalar_sum_op<float, float>, const Eigen::CwiseBinaryOp<Eigen::internal::scalar_sum_op<float, float>, const Eigen::CwiseBinaryOp<Eigen::internal::scalar_sum_op<float, float>, const Eigen::Product<Eigen::Matrix<float, 3, 1>, Eigen::Matrix<float, 3, 1>, 0>, const Eigen::Product<Eigen::Matrix<float, 3, 1>, Eigen::Matrix<float, 3, 1>, 0> >, const Eigen::Product<Eigen::Matrix<float, 3, 1>, Eigen::Matrix<float, 3, 1>, 0> >, const Eigen::Product<Eigen::Matrix<float, 3, 1>, Eigen::Matrix<float, 3, 1>, 0> >; Func = Eigen::internal::assign_op<float, float>; typename Eigen::internal::enable_if<Eigen::internal::evaluator_assume_aliasing<Src>::value, void*>::type = void*][m[Kâ€™
[01m[K/usr/include/eigen3/Eigen/src/Core/AssignEvaluator.h:782:18:[m[K   required from â€˜[01m[Kvoid Eigen::internal::call_assignment(Dst&, const Src&) [with Dst = Eigen::Matrix<float, 3, 1>; Src = Eigen::CwiseBinaryOp<Eigen::internal::scalar_sum_op<float, float>, const Eigen::CwiseBinaryOp<Eigen::internal::scalar_sum_op<float, float>, const Eigen::CwiseBinaryOp<Eigen::internal::scalar_sum_op<float, float>, const Eigen::Product<Eigen::Matrix<float, 3, 1>, Eigen::Matrix<float, 3, 1>, 0>, const Eigen::Product<Eigen::Matrix<float, 3, 1>, Eigen::Matrix<float, 3, 1>, 0> >, const Eigen::Product<Eigen::Matrix<float, 3, 1>, Eigen::Matrix<float, 3, 1>, 0> >, const Eigen::Product<Eigen::Matrix<float, 3, 1>, Eigen::Matrix<float, 3, 1>, 0> >][m[Kâ€™
[01m[K/usr/include/eigen3/Eigen/src/Core/PlainObjectBase.h:714:32:[m[K   required from â€˜[01m[KDerived& Eigen::PlainObjectBase<Derived>::_set(const Eigen::DenseBase<OtherDerived>&) [with OtherDerived = Eigen::CwiseBinaryOp<Eigen::internal::scalar_sum_op<float, float>, const Eigen::CwiseBinaryOp<Eigen::internal::scalar_sum_op<float, float>, const Eigen::CwiseBinaryOp<Eigen::internal::scalar_sum_op<float, float>, const Eigen::Product<Eigen::Matrix<float, 3, 1>, Eigen::Matrix<float, 3, 1>, 0>, const Eigen::Product<Eigen::Matrix<float, 3, 1>, Eigen::Matrix<float, 3, 1>, 0> >, const Eigen::Product<Eigen::Matrix<float, 3, 1>, Eigen::Matrix<float, 3, 1>, 0> >, const Eigen::Product<Eigen::Matrix<float, 3, 1>, Eigen::Matrix<float, 3, 1>, 0> >; Derived = Eigen::Matrix<float, 3, 1>][m[Kâ€™
[01m[K/usr/include/eigen3/Eigen/src/Core/Matrix.h:225:24:[m[K   required from â€˜[01m[KEigen::Matrix<_Scalar, _Rows, _Cols, _Options, _MaxRows, _MaxCols>& Eigen::Matrix<_Scalar, _Rows, _Cols, _Options, _MaxRows, _MaxCols>::operator=(const Eigen::DenseBase<OtherDerived>&) [with OtherDerived = Eigen::CwiseBinaryOp<Eigen::internal::scalar_sum_op<float, float>, const Eigen::CwiseBinaryOp<Eigen::internal::scalar_sum_op<float, float>, const Eigen::CwiseBinaryOp<Eigen::internal::scalar_sum_op<float, float>, const Eigen::Product<Eigen::Matrix<float, 3, 1>, Eigen::Matrix<float, 3, 1>, 0>, const Eigen::Product<Eigen::Matrix<float, 3, 1>, Eigen::Matrix<float, 3, 1>, 0> >, const Eigen::Product<Eigen::Matrix<float, 3, 1>, Eigen::Matrix<float, 3, 1>, 0> >, const Eigen::Product<Eigen::Matrix<float, 3, 1>, Eigen::Matrix<float, 3, 1>, 0> >; _Scalar = float; int _Rows = 3; int _Cols = 1; int _Options = 0; int _MaxRows = 3; int _MaxCols = 1][m[Kâ€™
[01m[K/home/roku/workspace_jun/dt_test/src/dt_test_pkg/src/dynamic_model_quad.cpp:158:83:[m[K   required from here
[01m[K/usr/include/eigen3/Eigen/src/Core/GeneralProduct.h:444:38:[m[K [01;31m[Kerror: [m[Kstatic assertion failed: INVALID_VECTOR_VECTOR_PRODUCT__IF_YOU_WANTED_A_DOT_OR_COEFF_WISE_PRODUCT_YOU_MUST_USE_THE_EXPLICIT_FUNCTIONS
   EIGEN_STATIC_ASSERT([01;31m[KProductIsValid || !(AreVectors && SameSizes)[m[K,
                       [01;31m[K~~~~~~~~~~~~~~~^~~~~~~~~~~~~~~~~~~~~~~~~~~~~[m[K
[01m[K/usr/include/eigen3/Eigen/src/Core/util/StaticAssert.h:33:54:[m[K [01;36m[Knote: [m[Kin definition of macro â€˜[01m[KEIGEN_STATIC_ASSERT[m[Kâ€™
     #define EIGEN_STATIC_ASSERT(X,MSG) static_assert([01;36m[KX[m[K,#MSG);
                                                      [01;36m[K^[m[K
/usr/include/eigen3/Eigen/src/Core/CwiseBinaryOp.h: In instantiation of â€˜[01m[KEigen::CwiseBinaryOp<BinaryOp, Lhs, Rhs>::CwiseBinaryOp(const Lhs&, const Rhs&, const BinaryOp&) [with BinaryOp = Eigen::internal::scalar_product_op<float, float>; LhsType = const Eigen::Transpose<const Eigen::Block<const Eigen::Matrix<float, 3, 1>, 1, 1, false> >; RhsType = const Eigen::Block<const Eigen::Matrix<float, 3, 1>, 3, 1, true>; Eigen::CwiseBinaryOp<BinaryOp, Lhs, Rhs>::Lhs = Eigen::Transpose<const Eigen::Block<const Eigen::Matrix<float, 3, 1>, 1, 1, false> >; Eigen::CwiseBinaryOp<BinaryOp, Lhs, Rhs>::Rhs = Eigen::Block<const Eigen::Matrix<float, 3, 1>, 3, 1, true>][m[Kâ€™:
[01m[K/usr/include/eigen3/Eigen/src/Core/../plugins/MatrixCwiseBinaryOps.h:25:10:[m[K   required from â€˜[01m[Kconst Eigen::CwiseBinaryOp<Eigen::internal::scalar_product_op<typename Eigen::internal::traits<T>::Scalar, typename Eigen::internal::traits<OtherDerived>::Scalar>, const Derived, const OtherDerived> Eigen::MatrixBase<Derived>::cwiseProduct(const Eigen::MatrixBase<OtherDerived>&) const [with OtherDerived = Eigen::Block<const Eigen::Matrix<float, 3, 1>, 3, 1, true>; Derived = Eigen::Transpose<const Eigen::Block<const Eigen::Matrix<float, 3, 1>, 1, 1, false> >; typename Eigen::internal::traits<OtherDerived>::Scalar = float; typename Eigen::internal::traits<T>::Scalar = float][m[Kâ€™
[01m[K/usr/include/eigen3/Eigen/src/Core/ProductEvaluators.h:552:72:[m[K   required from â€˜[01m[Kconst CoeffReturnType Eigen::internal::product_evaluator<Eigen::Product<Lhs, Rhs, 1>, ProductTag, Eigen::DenseShape, Eigen::DenseShape>::coeff(Eigen::Index, Eigen::Index) const [with Lhs = Eigen::Matrix<float, 3, 1>; Rhs = Eigen::Matrix<float, 3, 1>; int ProductTag = 4; typename Eigen::internal::traits<typename Eigen::Product<Lhs, Rhs, 1>::Rhs>::Scalar = float; typename Eigen::internal::traits<typename Eigen::Product<Lhs, Rhs, 1>::Lhs>::Scalar = float; Eigen::internal::product_evaluator<Eigen::Product<Lhs, Rhs, 1>, ProductTag, Eigen::DenseShape, Eigen::DenseShape>::CoeffReturnType = float; Eigen::Index = long int][m[Kâ€™
[01m[K/usr/include/eigen3/Eigen/src/Core/AssignEvaluator.h:631:5:[m[K   required from â€˜[01m[Kvoid Eigen::internal::generic_dense_assignment_kernel<DstEvaluatorTypeT, SrcEvaluatorTypeT, Functor, Version>::assignCoeff(Eigen::Index, Eigen::Index) [with DstEvaluatorTypeT = Eigen::internal::evaluator<Eigen::Matrix<float, 3, 1> >; SrcEvaluatorTypeT = Eigen::internal::evaluator<Eigen::Product<Eigen::Matrix<float, 3, 1>, Eigen::Matrix<float, 3, 1>, 1> >; Functor = Eigen::internal::add_assign_op<float, float>; int Version = 0; Eigen::Index = long int][m[Kâ€™
[01m[K/usr/include/eigen3/Eigen/src/Core/AssignEvaluator.h:645:5:[m[K   required from â€˜[01m[Kvoid Eigen::internal::generic_dense_assignment_kernel<DstEvaluatorTypeT, SrcEvaluatorTypeT, Functor, Version>::assignCoeffByOuterInner(Eigen::Index, Eigen::Index) [with DstEvaluatorTypeT = Eigen::internal::evaluator<Eigen::Matrix<float, 3, 1> >; SrcEvaluatorTypeT = Eigen::internal::evaluator<Eigen::Product<Eigen::Matrix<float, 3, 1>, Eigen::Matrix<float, 3, 1>, 1> >; Functor = Eigen::internal::add_assign_op<float, float>; int Version = 0; Eigen::Index = long int][m[Kâ€™
[01m[K/usr/include/eigen3/Eigen/src/Core/AssignEvaluator.h:206:5:[m[K   required from â€˜[01m[Kstatic void Eigen::internal::copy_using_evaluator_DefaultTraversal_CompleteUnrolling<Kernel, Index, Stop>::run(Kernel&) [with Kernel = Eigen::internal::generic_dense_assignment_kernel<Eigen::internal::evaluator<Eigen::Matrix<float, 3, 1> >, Eigen::internal::evaluator<Eigen::Product<Eigen::Matrix<float, 3, 1>, Eigen::Matrix<float, 3, 1>, 1> >, Eigen::internal::add_assign_op<float, float>, 0>; int Index = 0; int Stop = 3][m[Kâ€™
[01m[K/usr/include/eigen3/Eigen/src/Core/AssignEvaluator.h:435:92:[m[K   [ skipping 11 instantiation contexts, use -ftemplate-backtrace-limit=0 to disable ]
[01m[K/usr/include/eigen3/Eigen/src/Core/Matrix.h:294:31:[m[K   required from â€˜[01m[KEigen::Matrix<_Scalar, _Rows, _Cols, _Options, _MaxRows, _MaxCols>::Matrix(const T&) [with T = Eigen::CwiseBinaryOp<Eigen::internal::scalar_sum_op<float, float>, const Eigen::CwiseBinaryOp<Eigen::internal::scalar_sum_op<float, float>, const Eigen::CwiseBinaryOp<Eigen::internal::scalar_sum_op<float, float>, const Eigen::Product<Eigen::Matrix<float, 3, 1>, Eigen::Matrix<float, 3, 1>, 0>, const Eigen::Product<Eigen::Matrix<float, 3, 1>, Eigen::Matrix<float, 3, 1>, 0> >, const Eigen::Product<Eigen::Matrix<float, 3, 1>, Eigen::Matrix<float, 3, 1>, 0> >, const Eigen::Product<Eigen::Matrix<float, 3, 1>, Eigen::Matrix<float, 3, 1>, 0> >; _Scalar = float; int _Rows = 3; int _Cols = 1; int _Options = 0; int _MaxRows = 3; int _MaxCols = 1][m[Kâ€™
[01m[K/usr/include/eigen3/Eigen/src/Core/AssignEvaluator.h:796:41:[m[K   required from â€˜[01m[Kvoid Eigen::internal::call_assignment(Dst&, const Src&, const Func&, typename Eigen::internal::enable_if<Eigen::internal::evaluator_assume_aliasing<Src>::value, void*>::type) [with Dst = Eigen::Matrix<float, 3, 1>; Src = Eigen::CwiseBinaryOp<Eigen::internal::scalar_sum_op<float, float>, const Eigen::CwiseBinaryOp<Eigen::internal::scalar_sum_op<float, float>, const Eigen::CwiseBinaryOp<Eigen::internal::scalar_sum_op<float, float>, const Eigen::Product<Eigen::Matrix<float, 3, 1>, Eigen::Matrix<float, 3, 1>, 0>, const Eigen::Product<Eigen::Matrix<float, 3, 1>, Eigen::Matrix<float, 3, 1>, 0> >, const Eigen::Product<Eigen::Matrix<float, 3, 1>, Eigen::Matrix<float, 3, 1>, 0> >, const Eigen::Product<Eigen::Matrix<float, 3, 1>, Eigen::Matrix<float, 3, 1>, 0> >; Func = Eigen::internal::assign_op<float, float>; typename Eigen::internal::enable_if<Eigen::internal::evaluator_assume_aliasing<Src>::value, void*>::type = void*][m[Kâ€™
[01m[K/usr/include/eigen3/Eigen/src/Core/AssignEvaluator.h:782:18:[m[K   required from â€˜[01m[Kvoid Eigen::internal::call_assignment(Dst&, const Src&) [with Dst = Eigen::Matrix<float, 3, 1>; Src = Eigen::CwiseBinaryOp<Eigen::internal::scalar_sum_op<float, float>, const Eigen::CwiseBinaryOp<Eigen::internal::scalar_sum_op<float, float>, const Eigen::CwiseBinaryOp<Eigen::internal::scalar_sum_op<float, float>, const Eigen::Product<Eigen::Matrix<float, 3, 1>, Eigen::Matrix<float, 3, 1>, 0>, const Eigen::Product<Eigen::Matrix<float, 3, 1>, Eigen::Matrix<float, 3, 1>, 0> >, const Eigen::Product<Eigen::Matrix<float, 3, 1>, Eigen::Matrix<float, 3, 1>, 0> >, const Eigen::Product<Eigen::Matrix<float, 3, 1>, Eigen::Matrix<float, 3, 1>, 0> >][m[Kâ€™
[01m[K/usr/include/eigen3/Eigen/src/Core/PlainObjectBase.h:714:32:[m[K   required from â€˜[01m[KDerived& Eigen::PlainObjectBase<Derived>::_set(const Eigen::DenseBase<OtherDerived>&) [with OtherDerived = Eigen::CwiseBinaryOp<Eigen::internal::scalar_sum_op<float, float>, const Eigen::CwiseBinaryOp<Eigen::internal::scalar_sum_op<float, float>, const Eigen::CwiseBinaryOp<Eigen::internal::scalar_sum_op<float, float>, const Eigen::Product<Eigen::Matrix<float, 3, 1>, Eigen::Matrix<float, 3, 1>, 0>, const Eigen::Product<Eigen::Matrix<float, 3, 1>, Eigen::Matrix<float, 3, 1>, 0> >, const Eigen::Product<Eigen::Matrix<float, 3, 1>, Eigen::Matrix<float, 3, 1>, 0> >, const Eigen::Product<Eigen::Matrix<float, 3, 1>, Eigen::Matrix<float, 3, 1>, 0> >; Derived = Eigen::Matrix<float, 3, 1>][m[Kâ€™
[01m[K/usr/include/eigen3/Eigen/src/Core/Matrix.h:225:24:[m[K   required from â€˜[01m[KEigen::Matrix<_Scalar, _Rows, _Cols, _Options, _MaxRows, _MaxCols>& Eigen::Matrix<_Scalar, _Rows, _Cols, _Options, _MaxRows, _MaxCols>::operator=(const Eigen::DenseBase<OtherDerived>&) [with OtherDerived = Eigen::CwiseBinaryOp<Eigen::internal::scalar_sum_op<float, float>, const Eigen::CwiseBinaryOp<Eigen::internal::scalar_sum_op<float, float>, const Eigen::CwiseBinaryOp<Eigen::internal::scalar_sum_op<float, float>, const Eigen::Product<Eigen::Matrix<float, 3, 1>, Eigen::Matrix<float, 3, 1>, 0>, const Eigen::Product<Eigen::Matrix<float, 3, 1>, Eigen::Matrix<float, 3, 1>, 0> >, const Eigen::Product<Eigen::Matrix<float, 3, 1>, Eigen::Matrix<float, 3, 1>, 0> >, const Eigen::Product<Eigen::Matrix<float, 3, 1>, Eigen::Matrix<float, 3, 1>, 0> >; _Scalar = float; int _Rows = 3; int _Cols = 1; int _Options = 0; int _MaxRows = 3; int _MaxCols = 1][m[Kâ€™
[01m[K/home/roku/workspace_jun/dt_test/src/dt_test_pkg/src/dynamic_model_quad.cpp:158:83:[m[K   required from here
[01m[K/usr/include/eigen3/Eigen/src/Core/util/StaticAssert.h:174:5:[m[K [01;31m[Kerror: [m[Kstatic assertion failed: YOU_MIXED_MATRICES_OF_DIFFERENT_SIZES
      [01;31m[K( \[m[K
      [01;31m[K~~~[m[K
 [01;31m[K        (int(Eigen::internal::size_of_xpr_at_compile_time<TYPE0>::ret)==0 && int(Eigen::internal::size_of_xpr_at_compile_time<TYPE1>::ret)==0) \[m[K
         [01;31m[K~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~[m[K
 [01;31m[K    || (\[m[K
     [01;31m[K^~~~~[m[K
 [01;31m[K          (int(TYPE0::RowsAtCompileTime)==Eigen::Dynamic \[m[K
           [01;31m[K~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~[m[K
 [01;31m[K        || int(TYPE1::RowsAtCompileTime)==Eigen::Dynamic \[m[K
         [01;31m[K~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~[m[K
 [01;31m[K        || int(TYPE0::RowsAtCompileTime)==int(TYPE1::RowsAtCompileTime)) \[m[K
         [01;31m[K~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~[m[K
 [01;31m[K      &&  (int(TYPE0::ColsAtCompileTime)==Eigen::Dynamic \[m[K
       [01;31m[K~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~[m[K
 [01;31m[K        || int(TYPE1::ColsAtCompileTime)==Eigen::Dynamic \[m[K
         [01;31m[K~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~[m[K
 [01;31m[K        || int(TYPE0::ColsAtCompileTime)==int(TYPE1::ColsAtCompileTime))\[m[K
         [01;31m[K~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~[m[K
 [01;31m[K       ) \[m[K
        [01;31m[K~~~[m[K
 [01;31m[K     )[m[K
      [01;31m[K~[m[K
[01m[K/usr/include/eigen3/Eigen/src/Core/util/StaticAssert.h:33:54:[m[K [01;36m[Knote: [m[Kin definition of macro â€˜[01m[KEIGEN_STATIC_ASSERT[m[Kâ€™
     #define EIGEN_STATIC_ASSERT(X,MSG) static_assert([01;36m[KX[m[K,#MSG);
                                                      [01;36m[K^[m[K
[01m[K/usr/include/eigen3/Eigen/src/Core/util/StaticAssert.h:191:6:[m[K [01;36m[Knote: [m[Kin expansion of macro â€˜[01m[KEIGEN_PREDICATE_SAME_MATRIX_SIZE[m[Kâ€™
      [01;36m[KEIGEN_PREDICATE_SAME_MATRIX_SIZE[m[K(TYPE0,TYPE1),\
      [01;36m[K^~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~[m[K
[01m[K/usr/include/eigen3/Eigen/src/Core/CwiseBinaryOp.h:109:7:[m[K [01;36m[Knote: [m[Kin expansion of macro â€˜[01m[KEIGEN_STATIC_ASSERT_SAME_MATRIX_SIZE[m[Kâ€™
       [01;36m[KEIGEN_STATIC_ASSERT_SAME_MATRIX_SIZE[m[K(Lhs, Rhs)
       [01;36m[K^~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~[m[K
make[2]: *** [CMakeFiles/digital_twin.dir/build.make:63: CMakeFiles/digital_twin.dir/src/digital_twin.cpp.o] Error 1
make[1]: *** [CMakeFiles/Makefile2:1121: CMakeFiles/digital_twin.dir/all] Error 2
make: *** [Makefile:141: all] Error 2
