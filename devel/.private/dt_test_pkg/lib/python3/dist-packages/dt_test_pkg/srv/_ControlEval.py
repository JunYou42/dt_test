# This Python file uses the following encoding: utf-8
"""autogenerated by genpy from dt_test_pkg/ControlEvalRequest.msg. Do not edit."""
import codecs
import sys
python3 = True if sys.hexversion > 0x03000000 else False
import genpy
import struct

import geometry_msgs.msg

class ControlEvalRequest(genpy.Message):
  _md5sum = "87b808674d4dafd860439bc0a555cd53"
  _type = "dt_test_pkg/ControlEvalRequest"
  _has_header = False  # flag to mark the presence of a Header object
  _full_text = """#CREATE request parameters
geometry_msgs/Pose current_pose
geometry_msgs/Pose  target_pose
float64 limit_time


================================================================================
MSG: geometry_msgs/Pose
# A representation of pose in free space, composed of position and orientation. 
Point position
Quaternion orientation

================================================================================
MSG: geometry_msgs/Point
# This contains the position of a point in free space
float64 x
float64 y
float64 z

================================================================================
MSG: geometry_msgs/Quaternion
# This represents an orientation in free space in quaternion form.

float64 x
float64 y
float64 z
float64 w
"""
  __slots__ = ['current_pose','target_pose','limit_time']
  _slot_types = ['geometry_msgs/Pose','geometry_msgs/Pose','float64']

  def __init__(self, *args, **kwds):
    """
    Constructor. Any message fields that are implicitly/explicitly
    set to None will be assigned a default value. The recommend
    use is keyword arguments as this is more robust to future message
    changes.  You cannot mix in-order arguments and keyword arguments.

    The available fields are:
       current_pose,target_pose,limit_time

    :param args: complete set of field values, in .msg order
    :param kwds: use keyword arguments corresponding to message field names
    to set specific fields.
    """
    if args or kwds:
      super(ControlEvalRequest, self).__init__(*args, **kwds)
      # message fields cannot be None, assign default values for those that are
      if self.current_pose is None:
        self.current_pose = geometry_msgs.msg.Pose()
      if self.target_pose is None:
        self.target_pose = geometry_msgs.msg.Pose()
      if self.limit_time is None:
        self.limit_time = 0.
    else:
      self.current_pose = geometry_msgs.msg.Pose()
      self.target_pose = geometry_msgs.msg.Pose()
      self.limit_time = 0.

  def _get_types(self):
    """
    internal API method
    """
    return self._slot_types

  def serialize(self, buff):
    """
    serialize message into buffer
    :param buff: buffer, ``StringIO``
    """
    try:
      _x = self
      buff.write(_get_struct_15d().pack(_x.current_pose.position.x, _x.current_pose.position.y, _x.current_pose.position.z, _x.current_pose.orientation.x, _x.current_pose.orientation.y, _x.current_pose.orientation.z, _x.current_pose.orientation.w, _x.target_pose.position.x, _x.target_pose.position.y, _x.target_pose.position.z, _x.target_pose.orientation.x, _x.target_pose.orientation.y, _x.target_pose.orientation.z, _x.target_pose.orientation.w, _x.limit_time))
    except struct.error as se: self._check_types(struct.error("%s: '%s' when writing '%s'" % (type(se), str(se), str(locals().get('_x', self)))))
    except TypeError as te: self._check_types(ValueError("%s: '%s' when writing '%s'" % (type(te), str(te), str(locals().get('_x', self)))))

  def deserialize(self, str):
    """
    unpack serialized message in str into this message instance
    :param str: byte array of serialized message, ``str``
    """
    if python3:
      codecs.lookup_error("rosmsg").msg_type = self._type
    try:
      if self.current_pose is None:
        self.current_pose = geometry_msgs.msg.Pose()
      if self.target_pose is None:
        self.target_pose = geometry_msgs.msg.Pose()
      end = 0
      _x = self
      start = end
      end += 120
      (_x.current_pose.position.x, _x.current_pose.position.y, _x.current_pose.position.z, _x.current_pose.orientation.x, _x.current_pose.orientation.y, _x.current_pose.orientation.z, _x.current_pose.orientation.w, _x.target_pose.position.x, _x.target_pose.position.y, _x.target_pose.position.z, _x.target_pose.orientation.x, _x.target_pose.orientation.y, _x.target_pose.orientation.z, _x.target_pose.orientation.w, _x.limit_time,) = _get_struct_15d().unpack(str[start:end])
      return self
    except struct.error as e:
      raise genpy.DeserializationError(e)  # most likely buffer underfill


  def serialize_numpy(self, buff, numpy):
    """
    serialize message with numpy array types into buffer
    :param buff: buffer, ``StringIO``
    :param numpy: numpy python module
    """
    try:
      _x = self
      buff.write(_get_struct_15d().pack(_x.current_pose.position.x, _x.current_pose.position.y, _x.current_pose.position.z, _x.current_pose.orientation.x, _x.current_pose.orientation.y, _x.current_pose.orientation.z, _x.current_pose.orientation.w, _x.target_pose.position.x, _x.target_pose.position.y, _x.target_pose.position.z, _x.target_pose.orientation.x, _x.target_pose.orientation.y, _x.target_pose.orientation.z, _x.target_pose.orientation.w, _x.limit_time))
    except struct.error as se: self._check_types(struct.error("%s: '%s' when writing '%s'" % (type(se), str(se), str(locals().get('_x', self)))))
    except TypeError as te: self._check_types(ValueError("%s: '%s' when writing '%s'" % (type(te), str(te), str(locals().get('_x', self)))))

  def deserialize_numpy(self, str, numpy):
    """
    unpack serialized message in str into this message instance using numpy for array types
    :param str: byte array of serialized message, ``str``
    :param numpy: numpy python module
    """
    if python3:
      codecs.lookup_error("rosmsg").msg_type = self._type
    try:
      if self.current_pose is None:
        self.current_pose = geometry_msgs.msg.Pose()
      if self.target_pose is None:
        self.target_pose = geometry_msgs.msg.Pose()
      end = 0
      _x = self
      start = end
      end += 120
      (_x.current_pose.position.x, _x.current_pose.position.y, _x.current_pose.position.z, _x.current_pose.orientation.x, _x.current_pose.orientation.y, _x.current_pose.orientation.z, _x.current_pose.orientation.w, _x.target_pose.position.x, _x.target_pose.position.y, _x.target_pose.position.z, _x.target_pose.orientation.x, _x.target_pose.orientation.y, _x.target_pose.orientation.z, _x.target_pose.orientation.w, _x.limit_time,) = _get_struct_15d().unpack(str[start:end])
      return self
    except struct.error as e:
      raise genpy.DeserializationError(e)  # most likely buffer underfill

_struct_I = genpy.struct_I
def _get_struct_I():
    global _struct_I
    return _struct_I
_struct_15d = None
def _get_struct_15d():
    global _struct_15d
    if _struct_15d is None:
        _struct_15d = struct.Struct("<15d")
    return _struct_15d
# This Python file uses the following encoding: utf-8
"""autogenerated by genpy from dt_test_pkg/ControlEvalResponse.msg. Do not edit."""
import codecs
import sys
python3 = True if sys.hexversion > 0x03000000 else False
import genpy
import struct


class ControlEvalResponse(genpy.Message):
  _md5sum = "6f3e17e0aaa02da7d620767756fd89dc"
  _type = "dt_test_pkg/ControlEvalResponse"
  _has_header = False  # flag to mark the presence of a Header object
  _full_text = """#CREATE response parameters

bool control_ok
"""
  __slots__ = ['control_ok']
  _slot_types = ['bool']

  def __init__(self, *args, **kwds):
    """
    Constructor. Any message fields that are implicitly/explicitly
    set to None will be assigned a default value. The recommend
    use is keyword arguments as this is more robust to future message
    changes.  You cannot mix in-order arguments and keyword arguments.

    The available fields are:
       control_ok

    :param args: complete set of field values, in .msg order
    :param kwds: use keyword arguments corresponding to message field names
    to set specific fields.
    """
    if args or kwds:
      super(ControlEvalResponse, self).__init__(*args, **kwds)
      # message fields cannot be None, assign default values for those that are
      if self.control_ok is None:
        self.control_ok = False
    else:
      self.control_ok = False

  def _get_types(self):
    """
    internal API method
    """
    return self._slot_types

  def serialize(self, buff):
    """
    serialize message into buffer
    :param buff: buffer, ``StringIO``
    """
    try:
      _x = self.control_ok
      buff.write(_get_struct_B().pack(_x))
    except struct.error as se: self._check_types(struct.error("%s: '%s' when writing '%s'" % (type(se), str(se), str(locals().get('_x', self)))))
    except TypeError as te: self._check_types(ValueError("%s: '%s' when writing '%s'" % (type(te), str(te), str(locals().get('_x', self)))))

  def deserialize(self, str):
    """
    unpack serialized message in str into this message instance
    :param str: byte array of serialized message, ``str``
    """
    if python3:
      codecs.lookup_error("rosmsg").msg_type = self._type
    try:
      end = 0
      start = end
      end += 1
      (self.control_ok,) = _get_struct_B().unpack(str[start:end])
      self.control_ok = bool(self.control_ok)
      return self
    except struct.error as e:
      raise genpy.DeserializationError(e)  # most likely buffer underfill


  def serialize_numpy(self, buff, numpy):
    """
    serialize message with numpy array types into buffer
    :param buff: buffer, ``StringIO``
    :param numpy: numpy python module
    """
    try:
      _x = self.control_ok
      buff.write(_get_struct_B().pack(_x))
    except struct.error as se: self._check_types(struct.error("%s: '%s' when writing '%s'" % (type(se), str(se), str(locals().get('_x', self)))))
    except TypeError as te: self._check_types(ValueError("%s: '%s' when writing '%s'" % (type(te), str(te), str(locals().get('_x', self)))))

  def deserialize_numpy(self, str, numpy):
    """
    unpack serialized message in str into this message instance using numpy for array types
    :param str: byte array of serialized message, ``str``
    :param numpy: numpy python module
    """
    if python3:
      codecs.lookup_error("rosmsg").msg_type = self._type
    try:
      end = 0
      start = end
      end += 1
      (self.control_ok,) = _get_struct_B().unpack(str[start:end])
      self.control_ok = bool(self.control_ok)
      return self
    except struct.error as e:
      raise genpy.DeserializationError(e)  # most likely buffer underfill

_struct_I = genpy.struct_I
def _get_struct_I():
    global _struct_I
    return _struct_I
_struct_B = None
def _get_struct_B():
    global _struct_B
    if _struct_B is None:
        _struct_B = struct.Struct("<B")
    return _struct_B
class ControlEval(object):
  _type          = 'dt_test_pkg/ControlEval'
  _md5sum = '958048232c806861307e0b0592b4443c'
  _request_class  = ControlEvalRequest
  _response_class = ControlEvalResponse
