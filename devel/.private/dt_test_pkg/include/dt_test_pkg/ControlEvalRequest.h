// Generated by gencpp from file dt_test_pkg/ControlEvalRequest.msg
// DO NOT EDIT!


#ifndef DT_TEST_PKG_MESSAGE_CONTROLEVALREQUEST_H
#define DT_TEST_PKG_MESSAGE_CONTROLEVALREQUEST_H


#include <string>
#include <vector>
#include <memory>

#include <ros/types.h>
#include <ros/serialization.h>
#include <ros/builtin_message_traits.h>
#include <ros/message_operations.h>

#include <geometry_msgs/Pose.h>
#include <geometry_msgs/Pose.h>

namespace dt_test_pkg
{
template <class ContainerAllocator>
struct ControlEvalRequest_
{
  typedef ControlEvalRequest_<ContainerAllocator> Type;

  ControlEvalRequest_()
    : current_pose()
    , target_pose()
    , limit_time(0.0)  {
    }
  ControlEvalRequest_(const ContainerAllocator& _alloc)
    : current_pose(_alloc)
    , target_pose(_alloc)
    , limit_time(0.0)  {
  (void)_alloc;
    }



   typedef  ::geometry_msgs::Pose_<ContainerAllocator>  _current_pose_type;
  _current_pose_type current_pose;

   typedef  ::geometry_msgs::Pose_<ContainerAllocator>  _target_pose_type;
  _target_pose_type target_pose;

   typedef double _limit_time_type;
  _limit_time_type limit_time;





  typedef boost::shared_ptr< ::dt_test_pkg::ControlEvalRequest_<ContainerAllocator> > Ptr;
  typedef boost::shared_ptr< ::dt_test_pkg::ControlEvalRequest_<ContainerAllocator> const> ConstPtr;

}; // struct ControlEvalRequest_

typedef ::dt_test_pkg::ControlEvalRequest_<std::allocator<void> > ControlEvalRequest;

typedef boost::shared_ptr< ::dt_test_pkg::ControlEvalRequest > ControlEvalRequestPtr;
typedef boost::shared_ptr< ::dt_test_pkg::ControlEvalRequest const> ControlEvalRequestConstPtr;

// constants requiring out of line definition



template<typename ContainerAllocator>
std::ostream& operator<<(std::ostream& s, const ::dt_test_pkg::ControlEvalRequest_<ContainerAllocator> & v)
{
ros::message_operations::Printer< ::dt_test_pkg::ControlEvalRequest_<ContainerAllocator> >::stream(s, "", v);
return s;
}


template<typename ContainerAllocator1, typename ContainerAllocator2>
bool operator==(const ::dt_test_pkg::ControlEvalRequest_<ContainerAllocator1> & lhs, const ::dt_test_pkg::ControlEvalRequest_<ContainerAllocator2> & rhs)
{
  return lhs.current_pose == rhs.current_pose &&
    lhs.target_pose == rhs.target_pose &&
    lhs.limit_time == rhs.limit_time;
}

template<typename ContainerAllocator1, typename ContainerAllocator2>
bool operator!=(const ::dt_test_pkg::ControlEvalRequest_<ContainerAllocator1> & lhs, const ::dt_test_pkg::ControlEvalRequest_<ContainerAllocator2> & rhs)
{
  return !(lhs == rhs);
}


} // namespace dt_test_pkg

namespace ros
{
namespace message_traits
{





template <class ContainerAllocator>
struct IsMessage< ::dt_test_pkg::ControlEvalRequest_<ContainerAllocator> >
  : TrueType
  { };

template <class ContainerAllocator>
struct IsMessage< ::dt_test_pkg::ControlEvalRequest_<ContainerAllocator> const>
  : TrueType
  { };

template <class ContainerAllocator>
struct IsFixedSize< ::dt_test_pkg::ControlEvalRequest_<ContainerAllocator> >
  : TrueType
  { };

template <class ContainerAllocator>
struct IsFixedSize< ::dt_test_pkg::ControlEvalRequest_<ContainerAllocator> const>
  : TrueType
  { };

template <class ContainerAllocator>
struct HasHeader< ::dt_test_pkg::ControlEvalRequest_<ContainerAllocator> >
  : FalseType
  { };

template <class ContainerAllocator>
struct HasHeader< ::dt_test_pkg::ControlEvalRequest_<ContainerAllocator> const>
  : FalseType
  { };


template<class ContainerAllocator>
struct MD5Sum< ::dt_test_pkg::ControlEvalRequest_<ContainerAllocator> >
{
  static const char* value()
  {
    return "87b808674d4dafd860439bc0a555cd53";
  }

  static const char* value(const ::dt_test_pkg::ControlEvalRequest_<ContainerAllocator>&) { return value(); }
  static const uint64_t static_value1 = 0x87b808674d4dafd8ULL;
  static const uint64_t static_value2 = 0x60439bc0a555cd53ULL;
};

template<class ContainerAllocator>
struct DataType< ::dt_test_pkg::ControlEvalRequest_<ContainerAllocator> >
{
  static const char* value()
  {
    return "dt_test_pkg/ControlEvalRequest";
  }

  static const char* value(const ::dt_test_pkg::ControlEvalRequest_<ContainerAllocator>&) { return value(); }
};

template<class ContainerAllocator>
struct Definition< ::dt_test_pkg::ControlEvalRequest_<ContainerAllocator> >
{
  static const char* value()
  {
    return "#CREATE request parameters\n"
"geometry_msgs/Pose current_pose\n"
"geometry_msgs/Pose  target_pose\n"
"float64 limit_time\n"
"\n"
"\n"
"================================================================================\n"
"MSG: geometry_msgs/Pose\n"
"# A representation of pose in free space, composed of position and orientation. \n"
"Point position\n"
"Quaternion orientation\n"
"\n"
"================================================================================\n"
"MSG: geometry_msgs/Point\n"
"# This contains the position of a point in free space\n"
"float64 x\n"
"float64 y\n"
"float64 z\n"
"\n"
"================================================================================\n"
"MSG: geometry_msgs/Quaternion\n"
"# This represents an orientation in free space in quaternion form.\n"
"\n"
"float64 x\n"
"float64 y\n"
"float64 z\n"
"float64 w\n"
;
  }

  static const char* value(const ::dt_test_pkg::ControlEvalRequest_<ContainerAllocator>&) { return value(); }
};

} // namespace message_traits
} // namespace ros

namespace ros
{
namespace serialization
{

  template<class ContainerAllocator> struct Serializer< ::dt_test_pkg::ControlEvalRequest_<ContainerAllocator> >
  {
    template<typename Stream, typename T> inline static void allInOne(Stream& stream, T m)
    {
      stream.next(m.current_pose);
      stream.next(m.target_pose);
      stream.next(m.limit_time);
    }

    ROS_DECLARE_ALLINONE_SERIALIZER
  }; // struct ControlEvalRequest_

} // namespace serialization
} // namespace ros

namespace ros
{
namespace message_operations
{

template<class ContainerAllocator>
struct Printer< ::dt_test_pkg::ControlEvalRequest_<ContainerAllocator> >
{
  template<typename Stream> static void stream(Stream& s, const std::string& indent, const ::dt_test_pkg::ControlEvalRequest_<ContainerAllocator>& v)
  {
    s << indent << "current_pose: ";
    s << std::endl;
    Printer< ::geometry_msgs::Pose_<ContainerAllocator> >::stream(s, indent + "  ", v.current_pose);
    s << indent << "target_pose: ";
    s << std::endl;
    Printer< ::geometry_msgs::Pose_<ContainerAllocator> >::stream(s, indent + "  ", v.target_pose);
    s << indent << "limit_time: ";
    Printer<double>::stream(s, indent + "  ", v.limit_time);
  }
};

} // namespace message_operations
} // namespace ros

#endif // DT_TEST_PKG_MESSAGE_CONTROLEVALREQUEST_H
